
Contents:
  * Help!
  * What is Indri?
  * Using Indri
  * Building Indri
  * Running Indri
  * Additional Programs

-----
Help!
-----

If you have trouble using Indri, check online at lemurproject.org for updated
documentation.  You can also ask a question in the Lemur public
forum, also at lemurproject.org.  The Lemur and Indri developers watch the forum
and can answer your questions.

These links should help:
   http://www.lemurproject.org/phorum -- The Lemur public forum
   http://ciir.cs.umass.edu/~strohman/indri -- The Indri Tips page
   http://www.lemurproject.org/lemur/IndriQueryLanguage.html -- Query language
   http://www.lemurproject.org/doxygen/lemur/html -- Code documentation

--------------
What is Indri?
--------------

Indri is a new information retrieval system from the Lemur project; a joint effort
between the University of Massachusetts and Carnegie Mellon University.  It
combines the language modeling and inference network approaches to information
retrieval into one system.

For those who have used the Inquery system, Indri uses a query language that is
very similar, but adds additional features.  In particular, Indri understands 
tagged documents, like HTML and XML documents, and can therefore understand
queries like #1(george bush).person (which means 'find the phrase george bush 
appearing inside a person tag).  Indri can also understand numeric quantities.
You can find out more about the query language in the query language documentation.

We expect that Indri will be useful both for academic research and for certain
industrial applications.  Indri has been released under a permissive open source 
license.  Enterprise support for Indri is available from third parties.

-----------
Using Indri
-----------

Indri comes with three main command line programs: buildindex, runquery, and indrid.
In addition, Indri comes with two GUI programs: RetUI and IndexUI.  For many 
research tasks, these tools may meet your needs completely.  However, if your needs
are more complex, you may wish to use Indri as a library and build your own
applications.  You can access Indri from C++, Java, C# or PHP.

Applications: 

The buildindex application can build Indri repositories from TREC formatted documents,
HTML documents, text documents, and PDF files.  Additionally, on Windows it can index Word
and PowerPoint documents.  Buildindex understands tags in HTML/XML documents, and it
can be instructed to index them as well. 

The runquery application evaluates queries against one or more Indri repositories, and
returns the results in a ranked list of documents.  runquery can be instructed to 
print the document text as well, or the text of passages if the query is a
passage retrieval query.

The indrid application is a repository server.  It waits for connections from runquery
(or from other applications using the QueryEnvironment interface) and processes queries
from network requests.  One copy of runquery can connect to many indrid instances at once,
making retrieval using a cluster of machines possible.

Library:

Indri provides the QueryEnvironment and IndexEnvrionment classes, which can be used
from C++, Java, C# or PHP (although indexing is not supported from PHP).  The 
buildindex and runquery applications use these classes exclusively.

IndexEnvironment understands many different file types.  However, you can create your
own file type, as long as it is XML-like, and tell IndexEnvironment how to index it.
Then, using the addFile method, IndexEnvironment can index your document(s).  If you
want to do more complex processing on your data, or if your data is arriving in real time,
you may parse your document into a ParsedDocument structure.  The IndexEnvrionment
object can index these structures directly.

QueryEnvironment allows you to run queries and retrieve a ranked list of results.
You can use runAnnotatedQuery to retrieve match information (annotations), which is
useful for highlighting matched words in documents.  By using the addIndex method
with an instance of IndexEnvironment, you can evaluate queries on an index that
is currently being built.  The addServer method allows you to connect to indrid 
processes for distributed retrieval.

Web:

A fully functional web query interface comes with the Indri distribution.
You can find this interface in the lang/php/web directory, along with some 
instructions on how to use it. 

Site Search:

Indri now comes complete with a web site search system, suitable for indexing your own
website and providing search capabilities for your own pages.  This site search 
system combines a web crawler with Indri's link analysis, indexing and retrieval 
tools and a web interface.  More information on this is available in the site-search
directory.

--------------
Building Indri
--------------

Windows: If you are using a Windows machine, use the Visual Studio
solution file provided to build the source tree.  Note that the release
build of this software has Pentium IV optimizations turned on, which may
or may not work on your machine.

Linux, Solaris, Mac OS X, FreeBSD:  To build on a Unix variant, first run
configure and then type "make" in the indri directory. 

configure generates MakeDefns and Makefile.app. configure accepts
following arguments: 
  --disable-largefile     omit support for large files
  --enable-php            Enable php shared library generation
  --enable-csharp         Enable csharp shared library generation
  --enable-java           Enable java shared library generation
  --enable-assert         Enable assert statements in code

  --with-javahome=path       Set location of JAVAHOME
  --with-php-config=path       Set location of php-config
  --with-swig=path       Set location of swig executable
  --with-antlr=path       Set location of antlr install
  --with-site-seed=hostname       Set the seed host for site-search

-------------
Running Indri
-------------

buildindex takes these options:
  memory: (optional) How much memory buildindex should use (default is
  100mb) The value can include a scaling factor by adding a
  suffix. Valid values are (case insensitive) K = 1000, M = 1000000, G =
  1000000000. So 100M would be equivalent to 100000000. The value should
  contain only decimal digits and the optional suffix.

  index: path to where to place the Indri Repository.

  corpus.path: A directory or file that contains the text you want to
  index.

  corpus.class: The FileClassEnviroment of the file or directory
  containing documents to index. The known classes are: 

    html -- web page data. 
    trecweb -- TREC web format, eg terabyte track. 
    trectext -- TREC format, eg TREC-3 onward. 
    doc -- Microsoft Word format (windows platform only). 
    ppt -- Microsoft Powerpoint format (windows platform only). 
    pdf -- Adobe PDF format. 
    txt -- Plain text format. 

  metadata.field: specify the metadata fields to index, eg
  docno. This parameter may appear multiple times. 

  field.name: specify the fields to index as data, eg title. This
  parameter may appear multiple times. 

  field.numeric: the symbol true if the field contains numeric data,
  otherwise the symbol false. Default is false.

  stemmer.name: specify the stemming algorithm to use. Valid options are
  Porter or Krovetz (case insensitive). This is an optional parameter
  with the default of no stemming.  

  stopper.word: specify the stopwords to use. This parameter may appear
  multiple times. This is an optional parameter with the default of no
  stopping.  
	
runquery takes these options:
  memory: (optional) How much memory buildindex should use (default is
  100mb) The value can include a scaling factor by adding a
  suffix. Valid values are (case insensitive) K = 1000, M = 1000000, G =
  1000000000. So 100M would be equivalent to 100000000. The value should
  contain only decimal digits and the optional suffix.

  index: Path to the index(es) you want to query

  server: Name or address of a server running a copy of indrid
  that you want to query (repeat as many times as necessary).  You
  can optionally specify a port after a colon, like this:
  -server=localhost:14576 

  query: The query you want to run

  count: (optional) Number of documents you want to retrieve, at
  most (default is 1000). 

  stopper.word: specify the stopwords to use. This parameter may appear
  multiple times. This is an optional parameter with the default of no
  stopping.  

  rule: specifies the smoothing rule (TermScoreFunction) to
  apply. Format of the rule is:

    ( key ":" value ) [ "," key ":" value ]* 
    For example:

    -rule=method:linear,collectionLambda:0.2,field:title 

    This corresponds to Jelinek-Mercer smoothing with background lambda
    equal to 0.2, only for items in a title field. 

    If nothing is listed for a key, all values are assumed. So, a rule
    that does not specify a field matches all fields. This makes
    -rule=method:linear,collectionLambda:0.2 a valid rule. 

    Valid keys: 

    method: smoothing method (text) 

    field: field to apply this rule to

    operator: type of item in query to apply to { term, window } 

    Valid methods: 

    dirichlet: (also 'd', 'dir') (default mu=2500) 

    jelinek-mercer: (also 'jm', 'linear') (default collectionLambda=0.4,
    documentLambda=0.0), collectionLambda is also known as just "lambda",
    either will work 

    twostage: (also 'two-stage', 'two') (default mu=2500, lambda=0.4) 
    If the rule doesn't parse correctly, the default is Dirichlet,
    mu=2500.

Formatting parameters:

  queryOffset: an integer value specifying one less than the starting

  query number, eg 150 for TREC formatted output.

  runID: a string specifying the id for a query run, used in TREC
  scorable output.

  trecFormat: the symbol true to produce TREC scorable output, otherwise
  the symbol false.

  printDocuments: print the full text of each document retrieved

  printPassages: print only the passages of text retrieved (same as
    printDocuments when passage retrieval is not used)

  printSnippets: print a short bit of text summarizing each document
    retrieved, with all matching words capitalized

Pseudo-Relevance Feedback Parameters

  fbDocs: an integer specifying the number of documents to use for
  feedback.

  fbTerms: an integer specifying the number of terms to use for
  feedback. 

  fbMu: a floating point value specifying the value of mu to use for
  feedback.

  fbOrigWeight: a floating point value in the range [0.0..1.0]
  specifying the weight for the original query in the expanded query.


indrid takes the following options:
  memory: (optional) How much memory buildindex should use (default is
  100mb) The value can include a scaling factor by adding a
  suffix. Valid values are (case insensitive) K = 1000, M = 1000000, G =
  1000000000. So 100M would be equivalent to 100000000. The value should
  contain only decimal digits and the optional suffix.

  index: Relative path to the index you want to serve.

  port: (optional) The port you want to listen on (default is 16743)

-------------------
Additional Programs
-------------------

Indri also comes with some additional programs, which will only be briefly
mentioned here.

dumpindex -- A useful tool for printing information stored in an Indri index,
  including the names of indexed fields, the number of times each word in the
  vocabulary occurs in the index, etc.  If you are not sure if Indri is indexing
  your data correctly, try using dumpindex to find out.

harvestlinks -- A tool for extracting anchor text from TREC formatted web
  collections.  This data can then be used with buildindex to add anchor text
  to web document representations.

rmodel -- Builds relevance models from the top ranked documents for a particular
  query.  It supports n-grams too, where n can be arbitrarily large.

makeprior -- Allows you to add prior probabilities to documents in an Indri index
  for use with PageRank or URL depth features.  Once this prior information is
  added to the index, you can reference it in your queries with the #prior operator
  (e.g. #prior(urldepth)).

