/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.23
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif


#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIG_TEMPLATE_DISAMBIGUATOR template
#  else
#    define SWIG_TEMPLATE_DISAMBIGUATOR 
#  endif
#endif

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if !defined(STATIC_LINKED)
#    define SWIGEXPORT(a) __declspec(dllexport) a
#  else
#    define SWIGEXPORT(a) a
#  endif
#else
#  define SWIGEXPORT(a) a
#endif

#define SWIGRUNTIME(x) static x

#ifndef SWIGINLINE
#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#  define SWIGINLINE inline
#else
#  define SWIGINLINE
#endif
#endif


/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "1"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
#define SWIG_QUOTE_STRING(x) #x
#define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
#define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
#define SWIG_TYPE_TABLE_NAME
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;

/* 
   Compare two type names skipping the space characters, therefore
   "char*" == "char *" and "Class<int>" == "Class<int >", etc.

   Return 0 when the two name types are equivalent, as in
   strncmp, but skipping ' '.
*/
static int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
static int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}
  

/* Register a type mapping with the type-checking */
static swig_type_info *
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *swig_type_list_handle;
  while (tc) {
    /* check simple type equivalence */
    int typeequiv = (strcmp(tc->name, ti->name) == 0);   
    /* check full type equivalence, resolving typedefs */
    if (!typeequiv) {
      /* only if tc is not a typedef (no '|' on it) */
      if (tc->str && ti->str && !strstr(tc->str,"|")) {
	typeequiv = SWIG_TypeEquiv(ti->str,tc->str);
      }
    }
    if (typeequiv) {
      /* Already exists in the table.  Just add additional types to the list */
      if (ti->clientdata) tc->clientdata = ti->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *swig_type_list_handle;
  *swig_type_list_handle = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;

  return ret;
}

/* Check the typename */
static swig_type_info *
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
static SWIGINLINE void *
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
static swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
static SWIGINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Return the pretty name associated with this type,
   that is an unmangled type name in a form presentable to the user.
*/
static const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* Search for a swig_type_info structure */
static swig_type_info *
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = *swig_type_list_handle;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
static void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata) return;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = *swig_type_list_handle;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
static char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
static char *
SWIG_UnpackData(char *c, void *ptr, size_t sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
static void
SWIG_PropagateClientData(swig_type_info *type) {
  swig_type_info *equiv = type->next;
  swig_type_info *tc;
  if (!type->clientdata) return;
  while (equiv) {
    if (!equiv->converter) {
      tc = *swig_type_list_handle;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0) && !tc->clientdata)
          SWIG_TypeClientData(tc, type->clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

#ifdef __cplusplus
}
#endif

/*
 * php4.swg
 *
 * PHP4 runtime library
 *
 */

#ifdef __cplusplus
extern "C" {
#endif
#include "zend.h"
#include "zend_API.h"
#include "php.h"

/* These TSRMLS_ stuff should already be defined now, but with older php under
   redhat are not... */
#ifndef TSRMLS_D
#define TSRMLS_D
#endif
#ifndef TSRMLS_DC
#define TSRMLS_DC
#endif
#ifndef TSRMLS_C
#define TSRMLS_C
#endif
#ifndef TSRMLS_CC
#define TSRMLS_CC
#endif

#ifdef __cplusplus
}
#endif

/* used to wrap returned objects in so we know whether they are newobject
   and need freeing, or not */
typedef struct _swig_object_wrapper {
  void * ptr;
  int newobject;
} swig_object_wrapper;

/* local scope self_constructors are set to 1 inside function wrappers
   which are also class constructors, so that the php4.swg output typemaps
   know whether or not to wrap returned objects in this_ptr or a new object */
int self_constructor=0;

/* empty zend destructor for types without one */
static ZEND_RSRC_DTOR_FUNC(SWIG_landfill) {};

/* This one makes old swig style string pointers but the php module doesn't
   use these any more.  This is just left here for old times sake and may go */
static void
SWIG_MakePtr(char *c, void *ptr, swig_type_info *ty) {
  static char hex[17] = "0123456789abcdef";
  unsigned long p, s;
  char data[32], *r;

  r = data;
  p = (unsigned long) ptr;
  if (p > 0) {
    while (p > 0) {
      s = p & 0xf;
      *(r++) = hex[s];
      p = p >> 4;
    }
    *r = '_';
    while (r >= data) {
      *(c++) = *(r--);
    }
    strcpy (c, ty->name);
  } else {
    strcpy (c, "NULL");
  }
}

static void
SWIG_SetPointerChar(char **c, void *ptr, swig_type_info *type) {
   char data[512];

   SWIG_MakePtr(data, ptr, type);
   *c = estrdup(data);
}

#define SWIG_SetPointerZval(a,b,c,d) SWIG_ZTS_SetPointerZval(a,b,c,d, SWIG_module_entry TSRMLS_CC)

static void
SWIG_ZTS_SetPointerZval(zval *z, void *ptr, swig_type_info *type, int newobject, zend_module_entry* module_entry TSRMLS_DC) {
  swig_object_wrapper *value=NULL;
  /* No need to call SWIG_MakePtr here! */
  if (type->clientdata) {
    if (! (*(int *)(type->clientdata))) zend_error(E_ERROR, "Type: %s failed to register with zend",type->name);
    value=(swig_object_wrapper *)emalloc(sizeof(swig_object_wrapper));
    value->ptr=ptr;
    value->newobject=newobject;
    ZEND_REGISTER_RESOURCE(z, value, *(int *)(type->clientdata));
    return;
  } else { /* have to deal with old fashioned string pointer?
              but this should not get this far */
    zend_error(E_ERROR, "Type: %s not registered with zend",type->name);
  }
}

/* This old-style routine converts an old string-pointer c into a real pointer
   ptr calling making appropriate casting functions according to ty
   We don't use this any more */
static int
SWIG_ConvertPtr_(char *c, void **ptr, swig_type_info *ty) {
   register int d;
   unsigned long p;
   swig_type_info *tc;

   if(c == NULL) {
   	*ptr = 0;
	return 0;
   }

   p = 0;
   if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
	return 0;
    } else {
	goto type_error;
    }
  }

    c++;
    /* Extract hex value from pointer */
    while ((d = *c)) {
      if ((d >= '0') && (d <= '9'))
        p = (p << 4) + (d - '0');
      else if ((d >= 'a') && (d <= 'f'))
        p = (p << 4) + (d - ('a'-10));
      else
        break;
      c++;
    }
    *ptr = (void *) p;
	
    if(ty) {
	tc = SWIG_TypeCheck(c,ty);
	if(!tc) goto type_error;
	*ptr = SWIG_TypeCast(tc, (void*)p);
    }
    return 0;

type_error:

    return -1;
}

/* This is a new pointer conversion routine
   Taking the native pointer p (which would have been converted from the old
   string pointer) and it's php type id, and it's type name (which also would
   have come from the old string pointer) it converts it to ptr calling 
   appropriate casting functions according to ty
   Sadly PHP has no API to find a type name from a type id, only from an instance
   of a resource of the type id, so we have to pass type_name as well.
   The two functions which might call this are:
   SWIG_ZTS_ConvertResourcePtr which gets the type name from the resource
   and the registered zend destructors for which we have one per type each
   with the type name hard wired in. */
static int
SWIG_ZTS_ConvertResourceData(void * p, int type, const char *type_name, void **ptr, swig_type_info *ty TSRMLS_DC) {
  swig_type_info *tc;

  if (ty) {
    if (! type_name) {  
      /* can't convert p to ptr type ty if we don't know what type p is */
      return -1;
    } else {
      /* convert and cast p from type_name to ptr as ty
         Need to sort out const-ness, can SWIG_TypeCast really not take a const? */
      tc = SWIG_TypeCheck((char *)type_name,ty);
      if (!tc) return -1;
      *ptr = SWIG_TypeCast(tc, (void*)p);
    }
  } else {
    /* They don't care about the target type, so just pass on the pointer! */
    *ptr = (void *) p;
  }
  return 0;
}

/* This function fills ptr with a pointer of type ty by extracting the pointer
   and type info from the resource in z.  z must be a resource
   It uses SWIG_ZTS_ConvertResourceData to do the real work. */
static int
SWIG_ZTS_ConvertResourcePtr(zval *z, void **ptr, swig_type_info *ty TSRMLS_DC) {
  swig_object_wrapper *value;
  void *p;
  int type;
  char *type_name;

  value = (swig_object_wrapper *) zend_list_find(z->value.lval,&type);
  p = value->ptr;
  if (type==-1) return -1;

  type_name=zend_rsrc_list_get_rsrc_type(z->value.lval);

  return SWIG_ZTS_ConvertResourceData(p,type,type_name,ptr,ty TSRMLS_CC);
}

/* But in fact SWIG_ConvertPtr is the native interface for getting typed
   pointer values out of zvals.  We need the TSRMLS_ macros for when we
   make PHP type calls later as we handle php resources */
#define SWIG_ConvertPtr(a,b,c) SWIG_ZTS_ConvertPtr(a,b,c TSRMLS_CC)

/* We allow passing of a STRING or RESOURCE pointing to the object
   or an OBJECT whose _cPtr is a string or resource pointing to the object
   STRING pointers are very depracated */
static int
SWIG_ZTS_ConvertPtr(zval *z, void **ptr, swig_type_info *ty TSRMLS_DC) {
   char *c;
   zval *val;
   
   if(z == NULL) {
	*ptr = 0;
	return 0;
   }

   if (z->type==IS_OBJECT) {
     zval ** _cPtr;
     if (zend_hash_find(HASH_OF(z),"_cPtr",sizeof("_cPtr"),(void**)&_cPtr)==SUCCESS) {
       /* Don't co-erce to string if it isn't */
       if ((*_cPtr)->type==IS_STRING) c = Z_STRVAL_PP(_cPtr);
       else if ((*_cPtr)->type==IS_RESOURCE) {
         return SWIG_ZTS_ConvertResourcePtr(*_cPtr,ptr,ty TSRMLS_CC);
       } else goto type_error; /* _cPtr was not string or resource property */
     } else goto type_error; /* can't find property _cPtr */
   } else if (z->type==IS_RESOURCE) {
     return SWIG_ZTS_ConvertResourcePtr(z,ptr,ty TSRMLS_CC);
   } else if (z->type==IS_STRING) {
     c = Z_STRVAL_P(z); 
     return SWIG_ConvertPtr_(c,ptr,ty);
   } else goto type_error;

type_error:

    return -1;
}


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_INT64 swig_types[0] 
#define  SWIGTYPE_p_indri__api__ScoredExtentResult swig_types[1] 
#define  SWIGTYPE_p_indri__parse__TermExtent swig_types[2] 
#define  SWIGTYPE_p_indri__api__QueryEnvironment swig_types[3] 
#define  SWIGTYPE_p_UINT64 swig_types[4] 
#define  SWIGTYPE_p_indri__api__ParsedDocument swig_types[5] 
#define  SWIGTYPE_p_indri__api__QueryAnnotationNode swig_types[6] 
#define  SWIGTYPE_p_indri__api__QueryAnnotation swig_types[7] 
static swig_type_info *swig_types[9];

/* -------- TYPES TABLE (END) -------- */

/* header section */
/*
  +----------------------------------------------------------------------+
  | PHP version 4.0                                                      |
  +----------------------------------------------------------------------+
  | Copyright (c) 1997, 1998, 1999, 2000, 2001 The PHP Group             |
  +----------------------------------------------------------------------+
  | This source file is subject to version 2.02 of the PHP license,      |
  | that is bundled with this package in the file LICENSE, and is        |
  | available at through the world-wide-web at                           |
  | http://www.php.net/license/2_02.txt.                                 |
  | If you did not receive a copy of the PHP license and are unable to   |
  | obtain it through the world-wide-web, please send a note to          |
  | license@php.net so we can mail you a copy immediately.               |
  +----------------------------------------------------------------------+
  | Authors:                                                             |
  |                                                                      |
  +----------------------------------------------------------------------+
 */
#define SWIG_init	initindri

#define SWIG_name	"indri"
#ifdef __cplusplus
extern "C" {
#endif
#include "php.h"
#include "php_ini.h"
#include "ext/standard/info.h"
#include "php_indri.h"
#ifdef __cplusplus
}
#endif


#include "indri/indri-platform.h"
#include "lemur/lemur-compat.hpp"
#include "indri/QueryEnvironment.hpp"
#include "lemur/Exception.hpp"
// remap overloaded method names.
#define onetermCount termCount
#define onedocumentCount documentCount
#define runQuerydocset runQuery
#define runAnnotatedQuerydocset runAnnotatedQuery
#define documentsdocids documents
#define documentMetadatadocids documentMetadata


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


/* We should make use of "code" if we can */
#define SWIG_exception(code, msg) { zend_error(E_ERROR, msg); }


#include <stdexcept>


#include <string>

static int _wrap_propset_ScoredExtentResult(zend_property_reference *property_reference, pval *value);
static int _propset_ScoredExtentResult(zend_property_reference *property_reference, pval *value);
static pval _wrap_propget_ScoredExtentResult(zend_property_reference *property_reference);
static int _propget_ScoredExtentResult(zend_property_reference *property_reference, pval *value);
static int _wrap_propset_TermExtent(zend_property_reference *property_reference, pval *value);
static int _propset_TermExtent(zend_property_reference *property_reference, pval *value);
static pval _wrap_propget_TermExtent(zend_property_reference *property_reference);
static int _propget_TermExtent(zend_property_reference *property_reference, pval *value);
static int _wrap_propset_ParsedDocument(zend_property_reference *property_reference, pval *value);
static int _propset_ParsedDocument(zend_property_reference *property_reference, pval *value);
static pval _wrap_propget_ParsedDocument(zend_property_reference *property_reference);
static int _propget_ParsedDocument(zend_property_reference *property_reference, pval *value);
static int _wrap_propset_QueryAnnotationNode(zend_property_reference *property_reference, pval *value);
static int _propset_QueryAnnotationNode(zend_property_reference *property_reference, pval *value);
static pval _wrap_propget_QueryAnnotationNode(zend_property_reference *property_reference);
static int _propget_QueryAnnotationNode(zend_property_reference *property_reference, pval *value);
static int _wrap_propset_QueryAnnotation(zend_property_reference *property_reference, pval *value);
static int _propset_QueryAnnotation(zend_property_reference *property_reference, pval *value);
static pval _wrap_propget_QueryAnnotation(zend_property_reference *property_reference);
static int _propget_QueryAnnotation(zend_property_reference *property_reference, pval *value);
static int _wrap_propset_QueryEnvironment(zend_property_reference *property_reference, pval *value);
static int _propset_QueryEnvironment(zend_property_reference *property_reference, pval *value);
static pval _wrap_propget_QueryEnvironment(zend_property_reference *property_reference);
static int _propget_QueryEnvironment(zend_property_reference *property_reference, pval *value);
/* class entry subsection */
/* Function entries for ScoredExtentResult */
static zend_function_entry ScoredExtentResult_functions[] = {
	ZEND_NAMED_FE(scoredextentresult,
		_wrap_new_ScoredExtentResult, NULL)
	{ NULL, NULL, NULL}
};
/* Function entries for TermExtent */
static zend_function_entry TermExtent_functions[] = {
	ZEND_NAMED_FE(termextent,
		_wrap_new_TermExtent, NULL)
	{ NULL, NULL, NULL}
};
/* Function entries for ParsedDocument */
static zend_function_entry ParsedDocument_functions[] = {
	ZEND_NAMED_FE(parseddocument,
		_wrap_new_ParsedDocument, NULL)
	{ NULL, NULL, NULL}
};
/* Function entries for QueryAnnotationNode */
static zend_function_entry QueryAnnotationNode_functions[] = {
	ZEND_NAMED_FE(queryannotationnode,
		_wrap_new_QueryAnnotationNode, NULL)
	{ NULL, NULL, NULL}
};
/* Function entries for QueryAnnotation */
static zend_function_entry QueryAnnotation_functions[] = {
	ZEND_NAMED_FE(getquerytree,
		_wrap_QueryAnnotation_getQueryTree, NULL)
	ZEND_NAMED_FE(getannotations,
		_wrap_QueryAnnotation_getAnnotations, NULL)
	ZEND_NAMED_FE(getresults,
		_wrap_QueryAnnotation_getResults, NULL)
	ZEND_NAMED_FE(queryannotation,
		_wrap_new_QueryAnnotation, NULL)
	{ NULL, NULL, NULL}
};
/* Function entries for QueryEnvironment */
static zend_function_entry QueryEnvironment_functions[] = {
	ZEND_NAMED_FE(addserver,
		_wrap_QueryEnvironment_addServer, NULL)
	ZEND_NAMED_FE(addindex,
		_wrap_QueryEnvironment_addIndex, NULL)
	ZEND_NAMED_FE(close,
		_wrap_QueryEnvironment_close, NULL)
	ZEND_NAMED_FE(setmemory,
		_wrap_QueryEnvironment_setMemory, NULL)
	ZEND_NAMED_FE(setscoringrules,
		_wrap_QueryEnvironment_setScoringRules, NULL)
	ZEND_NAMED_FE(setstopwords,
		_wrap_QueryEnvironment_setStopwords, NULL)
	ZEND_NAMED_FE(runquery,
		_wrap_QueryEnvironment_runQuery, NULL)
	ZEND_NAMED_FE(runquerydocset,
		_wrap_QueryEnvironment_runQuerydocset, NULL)
	ZEND_NAMED_FE(runannotatedquery,
		_wrap_QueryEnvironment_runAnnotatedQuery, NULL)
	ZEND_NAMED_FE(runannotatedquerydocset,
		_wrap_QueryEnvironment_runAnnotatedQuerydocset, NULL)
	ZEND_NAMED_FE(documentsdocids,
		_wrap_QueryEnvironment_documentsdocids, NULL)
	ZEND_NAMED_FE(documents,
		_wrap_QueryEnvironment_documents, NULL)
	ZEND_NAMED_FE(documentmetadatadocids,
		_wrap_QueryEnvironment_documentMetadatadocids, NULL)
	ZEND_NAMED_FE(documentmetadata,
		_wrap_QueryEnvironment_documentMetadata, NULL)
	ZEND_NAMED_FE(termcount,
		_wrap_QueryEnvironment_termCount, NULL)
	ZEND_NAMED_FE(onetermcount,
		_wrap_QueryEnvironment_onetermCount, NULL)
	ZEND_NAMED_FE(stemcount,
		_wrap_QueryEnvironment_stemCount, NULL)
	ZEND_NAMED_FE(termfieldcount,
		_wrap_QueryEnvironment_termFieldCount, NULL)
	ZEND_NAMED_FE(stemfieldcount,
		_wrap_QueryEnvironment_stemFieldCount, NULL)
	ZEND_NAMED_FE(fieldlist,
		_wrap_QueryEnvironment_fieldList, NULL)
	ZEND_NAMED_FE(documentcount,
		_wrap_QueryEnvironment_documentCount, NULL)
	ZEND_NAMED_FE(onedocumentcount,
		_wrap_QueryEnvironment_onedocumentCount, NULL)
	ZEND_NAMED_FE(queryenvironment,
		_wrap_new_QueryEnvironment, NULL)
	{ NULL, NULL, NULL}
};


/* entry subsection */
/* Every non-class user visible function must have an entry here */
function_entry indri_functions[] = {
	{NULL, NULL, NULL}
};

zend_module_entry indri_module_entry = {
#if ZEND_MODULE_API_NO > 20010900
    STANDARD_MODULE_HEADER,
#endif
    "indri",
    indri_functions,
    PHP_MINIT(indri),
    PHP_MSHUTDOWN(indri),
    PHP_RINIT(indri),
    PHP_RSHUTDOWN(indri),
    PHP_MINFO(indri),
#if ZEND_MODULE_API_NO > 20010900
    NO_VERSION_YET,
#endif
    STANDARD_MODULE_PROPERTIES
};
zend_module_entry* SWIG_module_entry = &indri_module_entry;


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_INT64[] = {{"_p_INT64", 0, "long long *|INT64 *", 0, 0, 0, 0},{"_p_INT64", 0, 0, 0, 0, 0, 0},{"_p_UINT64", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_indri__api__ScoredExtentResult[] = {{"_p_indri__api__ScoredExtentResult", 0, "indri::api::ScoredExtentResult *", 0, 0, 0, 0},{"_p_indri__api__ScoredExtentResult", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_indri__parse__TermExtent[] = {{"_p_indri__parse__TermExtent", 0, "indri::parse::TermExtent *", 0, 0, 0, 0},{"_p_indri__parse__TermExtent", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_indri__api__QueryEnvironment[] = {{"_p_indri__api__QueryEnvironment", 0, "indri::api::QueryEnvironment *", 0, 0, 0, 0},{"_p_indri__api__QueryEnvironment", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_UINT64[] = {{"_p_UINT64", 0, "long long *|UINT64 *", 0, 0, 0, 0},{"_p_INT64", 0, 0, 0, 0, 0, 0},{"_p_UINT64", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_indri__api__ParsedDocument[] = {{"_p_indri__api__ParsedDocument", 0, "indri::api::ParsedDocument *", 0, 0, 0, 0},{"_p_indri__api__ParsedDocument", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_indri__api__QueryAnnotationNode[] = {{"_p_indri__api__QueryAnnotationNode", 0, "indri::api::QueryAnnotationNode *", 0, 0, 0, 0},{"_p_indri__api__QueryAnnotationNode", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_indri__api__QueryAnnotation[] = {{"_p_indri__api__QueryAnnotation", 0, "indri::api::QueryAnnotation *", 0, 0, 0, 0},{"_p_indri__api__QueryAnnotation", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_INT64, 
_swigt__p_indri__api__ScoredExtentResult, 
_swigt__p_indri__parse__TermExtent, 
_swigt__p_indri__api__QueryEnvironment, 
_swigt__p_UINT64, 
_swigt__p_indri__api__ParsedDocument, 
_swigt__p_indri__api__QueryAnnotationNode, 
_swigt__p_indri__api__QueryAnnotation, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* vdecl subsection */
static zend_class_entry ce_swig_ScoredExtentResult;
static zend_class_entry* ptr_ce_swig_ScoredExtentResult=NULL;
static zend_class_entry ce_swig_TermExtent;
static zend_class_entry* ptr_ce_swig_TermExtent=NULL;
static zend_class_entry ce_swig_ParsedDocument;
static zend_class_entry* ptr_ce_swig_ParsedDocument=NULL;
static zend_class_entry ce_swig_QueryAnnotationNode;
static zend_class_entry* ptr_ce_swig_QueryAnnotationNode=NULL;
static zend_class_entry ce_swig_QueryAnnotation;
static zend_class_entry* ptr_ce_swig_QueryAnnotation=NULL;
static zend_class_entry ce_swig_QueryEnvironment;
static zend_class_entry* ptr_ce_swig_QueryEnvironment=NULL;
static int le_swig__p_INT64=0; /* handle for  */
static int le_swig__p_indri__api__ScoredExtentResult=0; /* handle for ScoredExtentResult */
static int le_swig__p_indri__parse__TermExtent=0; /* handle for TermExtent */
static int le_swig__p_indri__api__QueryEnvironment=0; /* handle for QueryEnvironment */
static int le_swig__p_UINT64=0; /* handle for QueryEnvironment */
static int le_swig__p_indri__api__ParsedDocument=0; /* handle for ParsedDocument */
static int le_swig__p_indri__api__QueryAnnotationNode=0; /* handle for QueryAnnotationNode */
static int le_swig__p_indri__api__QueryAnnotation=0; /* handle for QueryAnnotation */
/* end vdecl subsection */
/* wrapper section */


zval *php_makeQueryAnnotationNode(indri::api::QueryAnnotationNode *inNode) {
  zval *retval = 0, *_cPtr;
  MAKE_STD_ZVAL(_cPtr);
  MAKE_STD_ZVAL(retval);
  SWIG_SetPointerZval(retval, (void *)inNode,SWIGTYPE_p_indri__api__QueryAnnotationNode, 1);
  *_cPtr = *retval;
  INIT_ZVAL(*retval);
  object_init_ex(retval,ptr_ce_swig_QueryAnnotationNode);
  add_property_zval(retval,"_cPtr",_cPtr);
  // don't deref NULL
  if (inNode) {
  // name
  // type
  // query text
  // children
  add_property_string(retval, "name", (char *)inNode->name.c_str(), 1);
  add_property_string(retval, "type",  (char *)inNode->type.c_str(), 1);
  add_property_string(retval, "queryText",  (char *)inNode->queryText.c_str(), 1);
  zval *children;
  MAKE_STD_ZVAL(children);
  array_init(children);
  add_property_zval(retval, "children", children);
  for( unsigned int i=0; i<inNode->children.size(); i++ ) {
    zval *child;
    child = php_makeQueryAnnotationNode(inNode->children[i]);
    add_next_index_zval(children, child);
  }
}
  // need the _cPtr, etc.
  return retval;
}

ZEND_NAMED_FUNCTION(_wrap_new_ScoredExtentResult) {
    indri::api::ScoredExtentResult *result;
    zval **args[1];
    int argbase=0 ;
    
    /* NATIVE Constructor */
    int self_constructor=1;
    if(((ZEND_NUM_ARGS() + argbase )!= 0) || (zend_get_parameters_array_ex(0-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    result = (indri::api::ScoredExtentResult *)new indri::api::ScoredExtentResult();
    
    
    SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_indri__api__ScoredExtentResult, 1);
    
    /* Wrap this return value */
    if (this_ptr) {
        /* NATIVE Constructor, use this_ptr */
        zval *_cPtr; MAKE_STD_ZVAL(_cPtr);
        *_cPtr = *return_value;
        INIT_ZVAL(*return_value);
        add_property_zval(this_ptr,"_cPtr",_cPtr);
    } else if (! this_ptr) {
        /* ALTERNATIVE Constructor, make an object wrapper */
        zval *obj, *_cPtr;
        MAKE_STD_ZVAL(obj);
        MAKE_STD_ZVAL(_cPtr);
        *_cPtr = *return_value;
        INIT_ZVAL(*return_value);
        object_init_ex(obj,ptr_ce_swig_ScoredExtentResult);
        add_property_zval(obj,"_cPtr",_cPtr);
        *return_value=*obj;
    }
}


/* This function is designed to be called by the zend list destructors to typecast and do the actual destruction */
void __wrap_delete_ScoredExtentResult(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
    swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
    void *ptr=value->ptr ;
    int newobject=value->newobject ;
    indri::api::ScoredExtentResult *arg1 = (indri::api::ScoredExtentResult *) 0 ;
    
    efree(value);
    if (! newobject) return; /* can't delete it! */
    SWIG_ZTS_ConvertResourceData(ptr,rsrc->type,type_name,(void **) &arg1,SWIGTYPE_p_indri__api__ScoredExtentResult TSRMLS_CC);
    if (! arg1) zend_error(E_ERROR, "ScoredExtentResult resource already free'd");
    delete arg1;
    
}


ZEND_NAMED_FUNCTION(_wrap_delete_ScoredExtentResult) {
    indri::api::ScoredExtentResult *arg1 = (indri::api::ScoredExtentResult *) 0 ;
    zval **args[2];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 1) || (zend_get_parameters_array_ex(1-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__ScoredExtentResult) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of delete_ScoredExtentResult. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__ScoredExtentResult->name);
    }
    
    /*if ((*args[0])->type==IS_RESOURCE) { */
    /*  Get zend list destructor to free it */
    /*  zend_list_delete(Z_LVAL_PP(args[0])); */
    /* } else {*/ 
    delete arg1;
    
    /*}*/
    
}


/* property handler for class ScoredExtentResult */
static pval _wrap_propget_ScoredExtentResult(zend_property_reference *property_reference) {
  pval result;
  pval **_result;
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  result.type = IS_NULL;
  if (_propget_ScoredExtentResult(property_reference, &result)==SUCCESS) return result;
  /* return it ourselves */
  if (zend_hash_find(Z_OBJPROP_P(property_reference->object),Z_STRVAL_P(&(property->element)),1+Z_STRLEN_P(&(property->element)),(void**)&_result)==SUCCESS) {
  zval *_value;
  MAKE_STD_ZVAL(_value);  *_value=**_result;
  INIT_PZVAL(_value);
  zval_copy_ctor(_value);
  return *_value;
  }
  result.type = IS_NULL;
  return result;
}
static int _propget_ScoredExtentResult(zend_property_reference *property_reference, pval *value) {
  /* get the property name */
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  char *propname=Z_STRVAL_P(&(property->element));
  return FAILURE;
}

static int _wrap_propset_ScoredExtentResult(zend_property_reference *property_reference, pval *value) { 
  zval * _value;
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  if (_propset_ScoredExtentResult(property_reference, value)==SUCCESS) return SUCCESS;
  /* set it ourselves as it is ScoredExtentResult */
  MAKE_STD_ZVAL(_value);
  *_value=*value;
  INIT_PZVAL(_value);
  zval_copy_ctor(_value);
  return add_property_zval_ex(property_reference->object,Z_STRVAL_P(&(property->element)),1+Z_STRLEN_P(&(property->element)),_value);
}
static int _propset_ScoredExtentResult(zend_property_reference *property_reference, pval *value) {
  /* get the property name */
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  char *propname=Z_STRVAL_P(&(property->element));
  return FAILURE;
}

static int _wrap_TermExtent_begin_set(zend_property_reference *property_reference, pval *value) {
    indri::parse::TermExtent *arg1 = (indri::parse::TermExtent *) 0 ;
    int arg2 ;
    zval **args[3];
    int argbase=0 ;
    
    
    if(SWIG_ConvertPtr(*&(property_reference->object), (void **) &arg1, SWIGTYPE_p_indri__parse__TermExtent) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of TermExtent_begin_set. Expected %s", 1-argbase, SWIGTYPE_p_indri__parse__TermExtent->name);
    }
    
    
    convert_to_long_ex(&value);
    arg2 = (int) Z_LVAL_PP(&value);
    
    if (arg1) (arg1)->begin = arg2;
    
    
    return SUCCESS;
}


static pval _wrap_TermExtent_begin_get(zend_property_reference *property_reference) {
    indri::parse::TermExtent *arg1 = (indri::parse::TermExtent *) 0 ;
    int result;
    zval **args[2];
    int argbase=0 ;
    zval _return_value;
    zval *return_value=&_return_value;
    
    
    if(SWIG_ConvertPtr(*&(property_reference->object), (void **) &arg1, SWIGTYPE_p_indri__parse__TermExtent) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of TermExtent_begin_get. Expected %s", 1-argbase, SWIGTYPE_p_indri__parse__TermExtent->name);
    }
    
    result = (int) ((arg1)->begin);
    
    
    ZVAL_LONG(return_value,result);
    
    return _return_value;
}


static int _wrap_TermExtent_end_set(zend_property_reference *property_reference, pval *value) {
    indri::parse::TermExtent *arg1 = (indri::parse::TermExtent *) 0 ;
    int arg2 ;
    zval **args[3];
    int argbase=0 ;
    
    
    if(SWIG_ConvertPtr(*&(property_reference->object), (void **) &arg1, SWIGTYPE_p_indri__parse__TermExtent) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of TermExtent_end_set. Expected %s", 1-argbase, SWIGTYPE_p_indri__parse__TermExtent->name);
    }
    
    
    convert_to_long_ex(&value);
    arg2 = (int) Z_LVAL_PP(&value);
    
    if (arg1) (arg1)->end = arg2;
    
    
    return SUCCESS;
}


static pval _wrap_TermExtent_end_get(zend_property_reference *property_reference) {
    indri::parse::TermExtent *arg1 = (indri::parse::TermExtent *) 0 ;
    int result;
    zval **args[2];
    int argbase=0 ;
    zval _return_value;
    zval *return_value=&_return_value;
    
    
    if(SWIG_ConvertPtr(*&(property_reference->object), (void **) &arg1, SWIGTYPE_p_indri__parse__TermExtent) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of TermExtent_end_get. Expected %s", 1-argbase, SWIGTYPE_p_indri__parse__TermExtent->name);
    }
    
    result = (int) ((arg1)->end);
    
    
    ZVAL_LONG(return_value,result);
    
    return _return_value;
}


ZEND_NAMED_FUNCTION(_wrap_new_TermExtent) {
    indri::parse::TermExtent *result;
    zval **args[1];
    int argbase=0 ;
    
    /* NATIVE Constructor */
    int self_constructor=1;
    if(((ZEND_NUM_ARGS() + argbase )!= 0) || (zend_get_parameters_array_ex(0-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    result = (indri::parse::TermExtent *)new indri::parse::TermExtent();
    
    
    SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_indri__parse__TermExtent, 1);
    
    /* Wrap this return value */
    if (this_ptr) {
        /* NATIVE Constructor, use this_ptr */
        zval *_cPtr; MAKE_STD_ZVAL(_cPtr);
        *_cPtr = *return_value;
        INIT_ZVAL(*return_value);
        add_property_zval(this_ptr,"_cPtr",_cPtr);
    } else if (! this_ptr) {
        /* ALTERNATIVE Constructor, make an object wrapper */
        zval *obj, *_cPtr;
        MAKE_STD_ZVAL(obj);
        MAKE_STD_ZVAL(_cPtr);
        *_cPtr = *return_value;
        INIT_ZVAL(*return_value);
        object_init_ex(obj,ptr_ce_swig_TermExtent);
        add_property_zval(obj,"_cPtr",_cPtr);
        *return_value=*obj;
    }
}


/* This function is designed to be called by the zend list destructors to typecast and do the actual destruction */
void __wrap_delete_TermExtent(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
    swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
    void *ptr=value->ptr ;
    int newobject=value->newobject ;
    indri::parse::TermExtent *arg1 = (indri::parse::TermExtent *) 0 ;
    
    efree(value);
    if (! newobject) return; /* can't delete it! */
    SWIG_ZTS_ConvertResourceData(ptr,rsrc->type,type_name,(void **) &arg1,SWIGTYPE_p_indri__parse__TermExtent TSRMLS_CC);
    if (! arg1) zend_error(E_ERROR, "TermExtent resource already free'd");
    delete arg1;
    
}


ZEND_NAMED_FUNCTION(_wrap_delete_TermExtent) {
    indri::parse::TermExtent *arg1 = (indri::parse::TermExtent *) 0 ;
    zval **args[2];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 1) || (zend_get_parameters_array_ex(1-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__parse__TermExtent) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of delete_TermExtent. Expected %s", 1-argbase, SWIGTYPE_p_indri__parse__TermExtent->name);
    }
    
    /*if ((*args[0])->type==IS_RESOURCE) { */
    /*  Get zend list destructor to free it */
    /*  zend_list_delete(Z_LVAL_PP(args[0])); */
    /* } else {*/ 
    delete arg1;
    
    /*}*/
    
}


/* property handler for class TermExtent */
static pval _wrap_propget_TermExtent(zend_property_reference *property_reference) {
  pval result;
  pval **_result;
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  result.type = IS_NULL;
  if (_propget_TermExtent(property_reference, &result)==SUCCESS) return result;
  /* return it ourselves */
  if (zend_hash_find(Z_OBJPROP_P(property_reference->object),Z_STRVAL_P(&(property->element)),1+Z_STRLEN_P(&(property->element)),(void**)&_result)==SUCCESS) {
  zval *_value;
  MAKE_STD_ZVAL(_value);  *_value=**_result;
  INIT_PZVAL(_value);
  zval_copy_ctor(_value);
  return *_value;
  }
  result.type = IS_NULL;
  return result;
}
static int _propget_TermExtent(zend_property_reference *property_reference, pval *value) {
  /* get the property name */
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  char *propname=Z_STRVAL_P(&(property->element));
  if (strcmp(propname,"end")==0) {
    *value=_wrap_TermExtent_end_get(property_reference);
    return SUCCESS;
  } else  if (strcmp(propname,"begin")==0) {
    *value=_wrap_TermExtent_begin_get(property_reference);
    return SUCCESS;
  } else  return FAILURE;
}

static int _wrap_propset_TermExtent(zend_property_reference *property_reference, pval *value) { 
  zval * _value;
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  if (_propset_TermExtent(property_reference, value)==SUCCESS) return SUCCESS;
  /* set it ourselves as it is TermExtent */
  MAKE_STD_ZVAL(_value);
  *_value=*value;
  INIT_PZVAL(_value);
  zval_copy_ctor(_value);
  return add_property_zval_ex(property_reference->object,Z_STRVAL_P(&(property->element)),1+Z_STRLEN_P(&(property->element)),_value);
}
static int _propset_TermExtent(zend_property_reference *property_reference, pval *value) {
  /* get the property name */
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  char *propname=Z_STRVAL_P(&(property->element));
  if (strcmp(propname,"begin")==0) {
    return _wrap_TermExtent_begin_set(property_reference, value);
  } else  if (strcmp(propname,"end")==0) {
    return _wrap_TermExtent_end_set(property_reference, value);
  } else  return FAILURE;
}

ZEND_NAMED_FUNCTION(_wrap_new_ParsedDocument) {
    indri::api::ParsedDocument *result;
    zval **args[1];
    int argbase=0 ;
    
    /* NATIVE Constructor */
    int self_constructor=1;
    if(((ZEND_NUM_ARGS() + argbase )!= 0) || (zend_get_parameters_array_ex(0-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    result = (indri::api::ParsedDocument *)new indri::api::ParsedDocument();
    
    
    SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_indri__api__ParsedDocument, 1);
    
    /* Wrap this return value */
    if (this_ptr) {
        /* NATIVE Constructor, use this_ptr */
        zval *_cPtr; MAKE_STD_ZVAL(_cPtr);
        *_cPtr = *return_value;
        INIT_ZVAL(*return_value);
        add_property_zval(this_ptr,"_cPtr",_cPtr);
    } else if (! this_ptr) {
        /* ALTERNATIVE Constructor, make an object wrapper */
        zval *obj, *_cPtr;
        MAKE_STD_ZVAL(obj);
        MAKE_STD_ZVAL(_cPtr);
        *_cPtr = *return_value;
        INIT_ZVAL(*return_value);
        object_init_ex(obj,ptr_ce_swig_ParsedDocument);
        add_property_zval(obj,"_cPtr",_cPtr);
        *return_value=*obj;
    }
}


/* This function is designed to be called by the zend list destructors to typecast and do the actual destruction */
void __wrap_delete_ParsedDocument(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
    swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
    void *ptr=value->ptr ;
    int newobject=value->newobject ;
    indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
    
    efree(value);
    if (! newobject) return; /* can't delete it! */
    SWIG_ZTS_ConvertResourceData(ptr,rsrc->type,type_name,(void **) &arg1,SWIGTYPE_p_indri__api__ParsedDocument TSRMLS_CC);
    if (! arg1) zend_error(E_ERROR, "ParsedDocument resource already free'd");
    delete arg1;
    
}


ZEND_NAMED_FUNCTION(_wrap_delete_ParsedDocument) {
    indri::api::ParsedDocument *arg1 = (indri::api::ParsedDocument *) 0 ;
    zval **args[2];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 1) || (zend_get_parameters_array_ex(1-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__ParsedDocument) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of delete_ParsedDocument. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__ParsedDocument->name);
    }
    
    /*if ((*args[0])->type==IS_RESOURCE) { */
    /*  Get zend list destructor to free it */
    /*  zend_list_delete(Z_LVAL_PP(args[0])); */
    /* } else {*/ 
    delete arg1;
    
    /*}*/
    
}


/* property handler for class ParsedDocument */
static pval _wrap_propget_ParsedDocument(zend_property_reference *property_reference) {
  pval result;
  pval **_result;
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  result.type = IS_NULL;
  if (_propget_ParsedDocument(property_reference, &result)==SUCCESS) return result;
  /* return it ourselves */
  if (zend_hash_find(Z_OBJPROP_P(property_reference->object),Z_STRVAL_P(&(property->element)),1+Z_STRLEN_P(&(property->element)),(void**)&_result)==SUCCESS) {
  zval *_value;
  MAKE_STD_ZVAL(_value);  *_value=**_result;
  INIT_PZVAL(_value);
  zval_copy_ctor(_value);
  return *_value;
  }
  result.type = IS_NULL;
  return result;
}
static int _propget_ParsedDocument(zend_property_reference *property_reference, pval *value) {
  /* get the property name */
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  char *propname=Z_STRVAL_P(&(property->element));
  return FAILURE;
}

static int _wrap_propset_ParsedDocument(zend_property_reference *property_reference, pval *value) { 
  zval * _value;
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  if (_propset_ParsedDocument(property_reference, value)==SUCCESS) return SUCCESS;
  /* set it ourselves as it is ParsedDocument */
  MAKE_STD_ZVAL(_value);
  *_value=*value;
  INIT_PZVAL(_value);
  zval_copy_ctor(_value);
  return add_property_zval_ex(property_reference->object,Z_STRVAL_P(&(property->element)),1+Z_STRLEN_P(&(property->element)),_value);
}
static int _propset_ParsedDocument(zend_property_reference *property_reference, pval *value) {
  /* get the property name */
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  char *propname=Z_STRVAL_P(&(property->element));
  return FAILURE;
}

ZEND_NAMED_FUNCTION(_wrap_new_QueryAnnotationNode) {
    indri::api::QueryAnnotationNode *result;
    zval **args[1];
    int argbase=0 ;
    
    /* NATIVE Constructor */
    int self_constructor=1;
    if(((ZEND_NUM_ARGS() + argbase )!= 0) || (zend_get_parameters_array_ex(0-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    result = (indri::api::QueryAnnotationNode *)new indri::api::QueryAnnotationNode();
    
    {
        zval *tmp = php_makeQueryAnnotationNode(result);
        *(return_value) =  *tmp;
        return;
    }
    /* Wrap this return value */
    if (this_ptr) {
        /* NATIVE Constructor, use this_ptr */
        zval *_cPtr; MAKE_STD_ZVAL(_cPtr);
        *_cPtr = *return_value;
        INIT_ZVAL(*return_value);
        add_property_zval(this_ptr,"_cPtr",_cPtr);
    } else if (! this_ptr) {
        /* ALTERNATIVE Constructor, make an object wrapper */
        zval *obj, *_cPtr;
        MAKE_STD_ZVAL(obj);
        MAKE_STD_ZVAL(_cPtr);
        *_cPtr = *return_value;
        INIT_ZVAL(*return_value);
        object_init_ex(obj,ptr_ce_swig_QueryAnnotationNode);
        add_property_zval(obj,"_cPtr",_cPtr);
        *return_value=*obj;
    }
}


/* This function is designed to be called by the zend list destructors to typecast and do the actual destruction */
void __wrap_delete_QueryAnnotationNode(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
    swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
    void *ptr=value->ptr ;
    int newobject=value->newobject ;
    indri::api::QueryAnnotationNode *arg1 = (indri::api::QueryAnnotationNode *) 0 ;
    
    efree(value);
    if (! newobject) return; /* can't delete it! */
    SWIG_ZTS_ConvertResourceData(ptr,rsrc->type,type_name,(void **) &arg1,SWIGTYPE_p_indri__api__QueryAnnotationNode TSRMLS_CC);
    if (! arg1) zend_error(E_ERROR, "QueryAnnotationNode resource already free'd");
    delete arg1;
    
}


ZEND_NAMED_FUNCTION(_wrap_delete_QueryAnnotationNode) {
    indri::api::QueryAnnotationNode *arg1 = (indri::api::QueryAnnotationNode *) 0 ;
    zval **args[2];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 1) || (zend_get_parameters_array_ex(1-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryAnnotationNode) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of delete_QueryAnnotationNode. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryAnnotationNode->name);
    }
    
    /*if ((*args[0])->type==IS_RESOURCE) { */
    /*  Get zend list destructor to free it */
    /*  zend_list_delete(Z_LVAL_PP(args[0])); */
    /* } else {*/ 
    delete arg1;
    
    /*}*/
    
}


/* property handler for class QueryAnnotationNode */
static pval _wrap_propget_QueryAnnotationNode(zend_property_reference *property_reference) {
  pval result;
  pval **_result;
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  result.type = IS_NULL;
  if (_propget_QueryAnnotationNode(property_reference, &result)==SUCCESS) return result;
  /* return it ourselves */
  if (zend_hash_find(Z_OBJPROP_P(property_reference->object),Z_STRVAL_P(&(property->element)),1+Z_STRLEN_P(&(property->element)),(void**)&_result)==SUCCESS) {
  zval *_value;
  MAKE_STD_ZVAL(_value);  *_value=**_result;
  INIT_PZVAL(_value);
  zval_copy_ctor(_value);
  return *_value;
  }
  result.type = IS_NULL;
  return result;
}
static int _propget_QueryAnnotationNode(zend_property_reference *property_reference, pval *value) {
  /* get the property name */
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  char *propname=Z_STRVAL_P(&(property->element));
  return FAILURE;
}

static int _wrap_propset_QueryAnnotationNode(zend_property_reference *property_reference, pval *value) { 
  zval * _value;
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  if (_propset_QueryAnnotationNode(property_reference, value)==SUCCESS) return SUCCESS;
  /* set it ourselves as it is QueryAnnotationNode */
  MAKE_STD_ZVAL(_value);
  *_value=*value;
  INIT_PZVAL(_value);
  zval_copy_ctor(_value);
  return add_property_zval_ex(property_reference->object,Z_STRVAL_P(&(property->element)),1+Z_STRLEN_P(&(property->element)),_value);
}
static int _propset_QueryAnnotationNode(zend_property_reference *property_reference, pval *value) {
  /* get the property name */
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  char *propname=Z_STRVAL_P(&(property->element));
  return FAILURE;
}

ZEND_NAMED_FUNCTION(_wrap_QueryAnnotation_getQueryTree) {
    indri::api::QueryAnnotation *arg1 = (indri::api::QueryAnnotation *) 0 ;
    indri::api::QueryAnnotationNode *result;
    zval **args[2];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 1) || (zend_get_parameters_array_ex(1-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryAnnotation) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryAnnotation_getQueryTree. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryAnnotation->name);
    }
    
    result = (indri::api::QueryAnnotationNode *)((indri::api::QueryAnnotation const *)arg1)->getQueryTree();
    
    {
        zval *tmp = php_makeQueryAnnotationNode(result);
        *(return_value) =  *tmp;
        return;
    }
    /* Wrap this return value */
    {
        /* ALTERNATIVE Constructor, make an object wrapper */
        zval *obj, *_cPtr;
        MAKE_STD_ZVAL(obj);
        MAKE_STD_ZVAL(_cPtr);
        *_cPtr = *return_value;
        INIT_ZVAL(*return_value);
        object_init_ex(obj,ptr_ce_swig_QueryAnnotationNode);
        add_property_zval(obj,"_cPtr",_cPtr);
        *return_value=*obj;
    }
}


ZEND_NAMED_FUNCTION(_wrap_QueryAnnotation_getAnnotations) {
    indri::api::QueryAnnotation *arg1 = (indri::api::QueryAnnotation *) 0 ;
    indri::infnet::EvaluatorNode::MResults *result;
    zval **args[2];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 1) || (zend_get_parameters_array_ex(1-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryAnnotation) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryAnnotation_getAnnotations. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryAnnotation->name);
    }
    
    {
        indri::infnet::EvaluatorNode::MResults const &_result_ref = ((indri::api::QueryAnnotation const *)arg1)->getAnnotations();
        result = (indri::infnet::EvaluatorNode::MResults *) &_result_ref;
    }
    
    {
        array_init(return_value);
        const indri::infnet::EvaluatorNode::MResults & matches = *result; 
        indri::infnet::EvaluatorNode::MResults::iterator iter;
        std::vector< indri::api::ScoredExtentResult >::size_type iIndex;
        for( iter = result->begin(); iter != result->end(); iter++ ) {
            zval *seRes;
            MAKE_STD_ZVAL(seRes);
            array_init(seRes);
            std::vector<indri::api::ScoredExtentResult>& vec = iter->second;
            char *key = (char *)iter->first.c_str();
            for (iIndex=0;iIndex<vec.size();iIndex++)  {
                zval *obj, *_cPtr;
                MAKE_STD_ZVAL(obj);
                MAKE_STD_ZVAL(_cPtr);
                indri::api::ScoredExtentResult *r = new indri::api::ScoredExtentResult(vec[iIndex]);
                SWIG_SetPointerZval(obj, (void *)r, SWIGTYPE_p_indri__api__ScoredExtentResult, 1);
                *_cPtr = *obj;
                INIT_ZVAL(*obj);
                object_init_ex(obj,ptr_ce_swig_ScoredExtentResult);
                add_property_double(obj,"score",r->score);
                add_property_long(obj,"document",r->document);
                add_property_long(obj,"begin",r->begin);
                add_property_long(obj,"end",r->end);
                add_property_zval(obj,"_cPtr",_cPtr);
                add_next_index_zval(seRes, obj);
            }
            add_assoc_zval(return_value, key, seRes);
        }
    }
}


ZEND_NAMED_FUNCTION(_wrap_QueryAnnotation_getResults) {
    indri::api::QueryAnnotation *arg1 = (indri::api::QueryAnnotation *) 0 ;
    std::vector<indri::api::ScoredExtentResult > *result;
    zval **args[2];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 1) || (zend_get_parameters_array_ex(1-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryAnnotation) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryAnnotation_getResults. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryAnnotation->name);
    }
    
    {
        std::vector<indri::api::ScoredExtentResult > const &_result_ref = ((indri::api::QueryAnnotation const *)arg1)->getResults();
        result = (std::vector<indri::api::ScoredExtentResult > *) &_result_ref;
    }
    
    {
        std::vector< indri::api::ScoredExtentResult >::size_type iIndex;
        array_init(return_value);
        std::vector< indri::api::ScoredExtentResult > *resultobj = result; 
        for (iIndex=0;iIndex<resultobj->size();iIndex++)  {
            zval *obj, *_cPtr, *retval;
            MAKE_STD_ZVAL(obj);
            MAKE_STD_ZVAL(_cPtr);
            indri::api::ScoredExtentResult *r = new indri::api::ScoredExtentResult((*resultobj)[iIndex]);
            SWIG_SetPointerZval(obj, (void *)r, SWIGTYPE_p_indri__api__ScoredExtentResult, 1);
            *_cPtr = *obj;
            INIT_ZVAL(*obj);
            object_init_ex(obj,ptr_ce_swig_ScoredExtentResult);
            add_property_double(obj,"score",r->score);
            add_property_long(obj,"document",r->document);
            add_property_long(obj,"begin",r->begin);
            add_property_long(obj,"end",r->end);
            add_property_zval(obj,"_cPtr",_cPtr);
            add_next_index_zval(return_value, obj);
        }
    }
}


ZEND_NAMED_FUNCTION(_wrap_new_QueryAnnotation) {
    indri::api::QueryAnnotation *result;
    zval **args[1];
    int argbase=0 ;
    
    /* NATIVE Constructor */
    int self_constructor=1;
    if(((ZEND_NUM_ARGS() + argbase )!= 0) || (zend_get_parameters_array_ex(0-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    result = (indri::api::QueryAnnotation *)new indri::api::QueryAnnotation();
    
    
    SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_indri__api__QueryAnnotation, 1);
    
    /* Wrap this return value */
    if (this_ptr) {
        /* NATIVE Constructor, use this_ptr */
        zval *_cPtr; MAKE_STD_ZVAL(_cPtr);
        *_cPtr = *return_value;
        INIT_ZVAL(*return_value);
        add_property_zval(this_ptr,"_cPtr",_cPtr);
    } else if (! this_ptr) {
        /* ALTERNATIVE Constructor, make an object wrapper */
        zval *obj, *_cPtr;
        MAKE_STD_ZVAL(obj);
        MAKE_STD_ZVAL(_cPtr);
        *_cPtr = *return_value;
        INIT_ZVAL(*return_value);
        object_init_ex(obj,ptr_ce_swig_QueryAnnotation);
        add_property_zval(obj,"_cPtr",_cPtr);
        *return_value=*obj;
    }
}


/* This function is designed to be called by the zend list destructors to typecast and do the actual destruction */
void __wrap_delete_QueryAnnotation(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
    swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
    void *ptr=value->ptr ;
    int newobject=value->newobject ;
    indri::api::QueryAnnotation *arg1 = (indri::api::QueryAnnotation *) 0 ;
    
    efree(value);
    if (! newobject) return; /* can't delete it! */
    SWIG_ZTS_ConvertResourceData(ptr,rsrc->type,type_name,(void **) &arg1,SWIGTYPE_p_indri__api__QueryAnnotation TSRMLS_CC);
    if (! arg1) zend_error(E_ERROR, "QueryAnnotation resource already free'd");
    delete arg1;
    
}


ZEND_NAMED_FUNCTION(_wrap_delete_QueryAnnotation) {
    indri::api::QueryAnnotation *arg1 = (indri::api::QueryAnnotation *) 0 ;
    zval **args[2];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 1) || (zend_get_parameters_array_ex(1-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryAnnotation) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of delete_QueryAnnotation. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryAnnotation->name);
    }
    
    /*if ((*args[0])->type==IS_RESOURCE) { */
    /*  Get zend list destructor to free it */
    /*  zend_list_delete(Z_LVAL_PP(args[0])); */
    /* } else {*/ 
    delete arg1;
    
    /*}*/
    
}


/* property handler for class QueryAnnotation */
static pval _wrap_propget_QueryAnnotation(zend_property_reference *property_reference) {
  pval result;
  pval **_result;
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  result.type = IS_NULL;
  if (_propget_QueryAnnotation(property_reference, &result)==SUCCESS) return result;
  /* return it ourselves */
  if (zend_hash_find(Z_OBJPROP_P(property_reference->object),Z_STRVAL_P(&(property->element)),1+Z_STRLEN_P(&(property->element)),(void**)&_result)==SUCCESS) {
  zval *_value;
  MAKE_STD_ZVAL(_value);  *_value=**_result;
  INIT_PZVAL(_value);
  zval_copy_ctor(_value);
  return *_value;
  }
  result.type = IS_NULL;
  return result;
}
static int _propget_QueryAnnotation(zend_property_reference *property_reference, pval *value) {
  /* get the property name */
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  char *propname=Z_STRVAL_P(&(property->element));
  return FAILURE;
}

static int _wrap_propset_QueryAnnotation(zend_property_reference *property_reference, pval *value) { 
  zval * _value;
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  if (_propset_QueryAnnotation(property_reference, value)==SUCCESS) return SUCCESS;
  /* set it ourselves as it is QueryAnnotation */
  MAKE_STD_ZVAL(_value);
  *_value=*value;
  INIT_PZVAL(_value);
  zval_copy_ctor(_value);
  return add_property_zval_ex(property_reference->object,Z_STRVAL_P(&(property->element)),1+Z_STRLEN_P(&(property->element)),_value);
}
static int _propset_QueryAnnotation(zend_property_reference *property_reference, pval *value) {
  /* get the property name */
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  char *propname=Z_STRVAL_P(&(property->element));
  return FAILURE;
}

ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_addServer) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    zval **args[3];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 2) || (zend_get_parameters_array_ex(2-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_addServer. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    {
        convert_to_string_ex(args[1-argbase]);
        temp2 = std::string(Z_STRVAL_PP(args[1-argbase]));
        arg2 = &temp2;
    }
    (arg1)->addServer((std::string const &)*arg2);
    
    
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_addIndex) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    zval **args[3];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 2) || (zend_get_parameters_array_ex(2-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_addIndex. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    {
        convert_to_string_ex(args[1-argbase]);
        temp2 = std::string(Z_STRVAL_PP(args[1-argbase]));
        arg2 = &temp2;
    }
    (arg1)->addIndex((std::string const &)*arg2);
    
    
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_close) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    zval **args[2];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 1) || (zend_get_parameters_array_ex(1-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_close. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    (arg1)->close();
    
    
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_setMemory) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    UINT64 arg2 ;
    zval **args[3];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 2) || (zend_get_parameters_array_ex(2-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_setMemory. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    
    convert_to_long_ex(args[1-argbase]);
    arg2 = (UINT64) Z_LVAL_PP(args[1-argbase]);
    
    (arg1)->setMemory(arg2);
    
    
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_setScoringRules) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    std::vector<std::string > *arg2 = 0 ;
    zval **args[3];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 2) || (zend_get_parameters_array_ex(2-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_setScoringRules. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    {
        int iStatus;
        ulong iIndex;
        char *sIndex=NULL;
        zval **Data;
        arg2=new std::vector< std::string >;
        convert_to_array(*args[1-argbase]);
        zend_hash_internal_pointer_reset((*args[1-argbase])->value.ht);
        while((iStatus=zend_hash_get_current_key((*args[1-argbase])->value.ht,&sIndex,&iIndex,1))!=HASH_KEY_NON_EXISTANT) {
            zend_hash_get_current_data((*args[1-argbase])->value.ht,(void **) &Data);
            convert_to_string(*Data);
            arg2->push_back((*Data)->value.str.val);
            zend_hash_move_forward((*args[1-argbase])->value.ht);  
            if (sIndex) {
                efree(sIndex);
                sIndex=NULL;
            }
        }
        zend_hash_internal_pointer_reset((*args[1-argbase])->value.ht);
    }
    (arg1)->setScoringRules((std::vector<std::string > const &)*arg2);
    
    
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_setStopwords) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    std::vector<std::string > *arg2 = 0 ;
    zval **args[3];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 2) || (zend_get_parameters_array_ex(2-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_setStopwords. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    {
        int iStatus;
        ulong iIndex;
        char *sIndex=NULL;
        zval **Data;
        arg2=new std::vector< std::string >;
        convert_to_array(*args[1-argbase]);
        zend_hash_internal_pointer_reset((*args[1-argbase])->value.ht);
        while((iStatus=zend_hash_get_current_key((*args[1-argbase])->value.ht,&sIndex,&iIndex,1))!=HASH_KEY_NON_EXISTANT) {
            zend_hash_get_current_data((*args[1-argbase])->value.ht,(void **) &Data);
            convert_to_string(*Data);
            arg2->push_back((*Data)->value.str.val);
            zend_hash_move_forward((*args[1-argbase])->value.ht);  
            if (sIndex) {
                efree(sIndex);
                sIndex=NULL;
            }
        }
        zend_hash_internal_pointer_reset((*args[1-argbase])->value.ht);
    }
    (arg1)->setStopwords((std::vector<std::string > const &)*arg2);
    
    
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_runQuery) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    SwigValueWrapper< std::vector<indri::api::ScoredExtentResult > > result;
    std::string temp2 ;
    zval **args[4];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 3) || (zend_get_parameters_array_ex(3-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_runQuery. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    {
        convert_to_string_ex(args[1-argbase]);
        temp2 = std::string(Z_STRVAL_PP(args[1-argbase]));
        arg2 = &temp2;
    }
    
    convert_to_long_ex(args[2-argbase]);
    arg3 = (int) Z_LVAL_PP(args[2-argbase]);
    
    {
        try {
            result = (arg1)->runQuery((std::string const &)*arg2,arg3);
            
        } catch( lemur::api::Exception& e ) {
            //    SWIG_exception( SWIG_RuntimeError, e.what().c_str() );
            // get a warning message rather than abort the script.
            zend_error(E_WARNING, e.what().c_str());
            RETURN_NULL() ;
        }
    }
    {
        std::vector< indri::api::ScoredExtentResult >::size_type iIndex;
        array_init(return_value);
        std::vector< indri::api::ScoredExtentResult > *resultobj = &result; 
        for (iIndex=0;iIndex<resultobj->size();iIndex++)  {
            zval *obj, *_cPtr;
            MAKE_STD_ZVAL(obj);
            MAKE_STD_ZVAL(_cPtr);
            indri::api::ScoredExtentResult *r = new indri::api::ScoredExtentResult((*resultobj)[iIndex]);
            SWIG_SetPointerZval(obj, (void *)r, SWIGTYPE_p_indri__api__ScoredExtentResult, 1);
            *_cPtr = *obj;
            INIT_ZVAL(*obj);
            object_init_ex(obj,ptr_ce_swig_ScoredExtentResult);
            add_property_double(obj,"score",r->score);
            add_property_long(obj,"document",r->document);
            add_property_long(obj,"begin",r->begin);
            add_property_long(obj,"end",r->end);
            add_property_zval(obj,"_cPtr",_cPtr);
            add_next_index_zval(return_value, obj);
        }
    }
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_runQuerydocset) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    std::string *arg2 = 0 ;
    std::vector<lemur::api::DOCID_T > *arg3 = 0 ;
    int arg4 ;
    SwigValueWrapper< std::vector<indri::api::ScoredExtentResult > > result;
    std::string temp2 ;
    zval **args[5];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 4) || (zend_get_parameters_array_ex(4-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_runQuerydocset. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    {
        convert_to_string_ex(args[1-argbase]);
        temp2 = std::string(Z_STRVAL_PP(args[1-argbase]));
        arg2 = &temp2;
    }
    {
        int iStatus;
        ulong iIndex;
        char *sIndex=NULL;
        zval **Data;
        arg3=new std::vector<lemur::api::DOCID_T>;
        convert_to_array(*args[2-argbase]);
        zend_hash_internal_pointer_reset((*args[1-argbase])->value.ht);
        while((iStatus=zend_hash_get_current_key((*args[2-argbase])->value.ht,&sIndex,&iIndex,1))!=HASH_KEY_NON_EXISTANT) {
            zend_hash_get_current_data((*args[2-argbase])->value.ht,(void **) &Data);
            convert_to_long(*Data);
            arg3->push_back((*Data)->value.lval);
            zend_hash_move_forward((*args[2-argbase])->value.ht);  
            if (sIndex) {
                efree(sIndex);
                sIndex=NULL;
            }
        }
        zend_hash_internal_pointer_reset((*args[1-argbase])->value.ht);
    }
    
    convert_to_long_ex(args[3-argbase]);
    arg4 = (int) Z_LVAL_PP(args[3-argbase]);
    
    {
        try {
            result = (arg1)->runQuerydocset((std::string const &)*arg2,(std::vector<lemur::api::DOCID_T > const &)*arg3,arg4);
            
        } catch( lemur::api::Exception& e ) {
            //    SWIG_exception( SWIG_RuntimeError, e.what().c_str() );
            // get a warning message rather than abort the script.
            zend_error(E_WARNING, e.what().c_str());
            RETURN_NULL() ;
        }
    }
    {
        std::vector< indri::api::ScoredExtentResult >::size_type iIndex;
        array_init(return_value);
        std::vector< indri::api::ScoredExtentResult > *resultobj = &result; 
        for (iIndex=0;iIndex<resultobj->size();iIndex++)  {
            zval *obj, *_cPtr;
            MAKE_STD_ZVAL(obj);
            MAKE_STD_ZVAL(_cPtr);
            indri::api::ScoredExtentResult *r = new indri::api::ScoredExtentResult((*resultobj)[iIndex]);
            SWIG_SetPointerZval(obj, (void *)r, SWIGTYPE_p_indri__api__ScoredExtentResult, 1);
            *_cPtr = *obj;
            INIT_ZVAL(*obj);
            object_init_ex(obj,ptr_ce_swig_ScoredExtentResult);
            add_property_double(obj,"score",r->score);
            add_property_long(obj,"document",r->document);
            add_property_long(obj,"begin",r->begin);
            add_property_long(obj,"end",r->end);
            add_property_zval(obj,"_cPtr",_cPtr);
            add_next_index_zval(return_value, obj);
        }
    }
    {
        // freearg typemap
        delete arg3;
    }
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_runAnnotatedQuery) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    indri::api::QueryAnnotation *result;
    std::string temp2 ;
    zval **args[4];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 3) || (zend_get_parameters_array_ex(3-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_runAnnotatedQuery. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    {
        convert_to_string_ex(args[1-argbase]);
        temp2 = std::string(Z_STRVAL_PP(args[1-argbase]));
        arg2 = &temp2;
    }
    
    convert_to_long_ex(args[2-argbase]);
    arg3 = (int) Z_LVAL_PP(args[2-argbase]);
    
    {
        try {
            result = (indri::api::QueryAnnotation *)(arg1)->runAnnotatedQuery((std::string const &)*arg2,arg3);
            
        } catch( lemur::api::Exception& e ) {
            //    SWIG_exception( SWIG_RuntimeError, e.what().c_str() );
            // get a warning message rather than abort the script.
            zend_error(E_WARNING, e.what().c_str());
            RETURN_NULL() ;
        }
    }
    
    SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_indri__api__QueryAnnotation, 0);
    
    /* Wrap this return value */
    {
        /* ALTERNATIVE Constructor, make an object wrapper */
        zval *obj, *_cPtr;
        MAKE_STD_ZVAL(obj);
        MAKE_STD_ZVAL(_cPtr);
        *_cPtr = *return_value;
        INIT_ZVAL(*return_value);
        object_init_ex(obj,ptr_ce_swig_QueryAnnotation);
        add_property_zval(obj,"_cPtr",_cPtr);
        *return_value=*obj;
    }
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_runAnnotatedQuerydocset) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    std::string *arg2 = 0 ;
    std::vector<lemur::api::DOCID_T > *arg3 = 0 ;
    int arg4 ;
    indri::api::QueryAnnotation *result;
    std::string temp2 ;
    zval **args[5];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 4) || (zend_get_parameters_array_ex(4-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_runAnnotatedQuerydocset. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    {
        convert_to_string_ex(args[1-argbase]);
        temp2 = std::string(Z_STRVAL_PP(args[1-argbase]));
        arg2 = &temp2;
    }
    {
        int iStatus;
        ulong iIndex;
        char *sIndex=NULL;
        zval **Data;
        arg3=new std::vector<lemur::api::DOCID_T>;
        convert_to_array(*args[2-argbase]);
        zend_hash_internal_pointer_reset((*args[1-argbase])->value.ht);
        while((iStatus=zend_hash_get_current_key((*args[2-argbase])->value.ht,&sIndex,&iIndex,1))!=HASH_KEY_NON_EXISTANT) {
            zend_hash_get_current_data((*args[2-argbase])->value.ht,(void **) &Data);
            convert_to_long(*Data);
            arg3->push_back((*Data)->value.lval);
            zend_hash_move_forward((*args[2-argbase])->value.ht);  
            if (sIndex) {
                efree(sIndex);
                sIndex=NULL;
            }
        }
        zend_hash_internal_pointer_reset((*args[1-argbase])->value.ht);
    }
    
    convert_to_long_ex(args[3-argbase]);
    arg4 = (int) Z_LVAL_PP(args[3-argbase]);
    
    {
        try {
            result = (indri::api::QueryAnnotation *)(arg1)->runAnnotatedQuerydocset((std::string const &)*arg2,(std::vector<lemur::api::DOCID_T > const &)*arg3,arg4);
            
        } catch( lemur::api::Exception& e ) {
            //    SWIG_exception( SWIG_RuntimeError, e.what().c_str() );
            // get a warning message rather than abort the script.
            zend_error(E_WARNING, e.what().c_str());
            RETURN_NULL() ;
        }
    }
    
    SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_indri__api__QueryAnnotation, 0);
    
    /* Wrap this return value */
    {
        /* ALTERNATIVE Constructor, make an object wrapper */
        zval *obj, *_cPtr;
        MAKE_STD_ZVAL(obj);
        MAKE_STD_ZVAL(_cPtr);
        *_cPtr = *return_value;
        INIT_ZVAL(*return_value);
        object_init_ex(obj,ptr_ce_swig_QueryAnnotation);
        add_property_zval(obj,"_cPtr",_cPtr);
        *return_value=*obj;
    }
    {
        // freearg typemap
        delete arg3;
    }
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_documentsdocids) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    std::vector<lemur::api::DOCID_T > *arg2 = 0 ;
    SwigValueWrapper< std::vector<indri::api::ParsedDocument * > > result;
    zval **args[3];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 2) || (zend_get_parameters_array_ex(2-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_documentsdocids. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    {
        int iStatus;
        ulong iIndex;
        char *sIndex=NULL;
        zval **Data;
        arg2=new std::vector<lemur::api::DOCID_T>;
        convert_to_array(*args[1-argbase]);
        zend_hash_internal_pointer_reset((*args[1-argbase])->value.ht);
        while((iStatus=zend_hash_get_current_key((*args[1-argbase])->value.ht,&sIndex,&iIndex,1))!=HASH_KEY_NON_EXISTANT) {
            zend_hash_get_current_data((*args[1-argbase])->value.ht,(void **) &Data);
            convert_to_long(*Data);
            arg2->push_back((*Data)->value.lval);
            zend_hash_move_forward((*args[1-argbase])->value.ht);  
            if (sIndex) {
                efree(sIndex);
                sIndex=NULL;
            }
        }
        zend_hash_internal_pointer_reset((*args[1-argbase])->value.ht);
    }
    {
        try {
            result = (arg1)->documentsdocids((std::vector<lemur::api::DOCID_T > const &)*arg2);
            
        } catch( lemur::api::Exception& e ) {
            //    SWIG_exception( SWIG_RuntimeError, e.what().c_str() );
            // get a warning message rather than abort the script.
            zend_error(E_WARNING, e.what().c_str());
            RETURN_NULL() ;
        }
    }
    {
        std::vector< indri::api::ParsedDocument * >::size_type iIndex;
        array_init(return_value);
        std::vector< indri::api::ParsedDocument * > *resultobj = &result; 
        for (iIndex=0;iIndex<resultobj->size();iIndex++)  {
            zval *obj, *_cPtr;
            MAKE_STD_ZVAL(obj);
            MAKE_STD_ZVAL(_cPtr);
            indri::api::ParsedDocument *r = (*resultobj)[iIndex];
            SWIG_SetPointerZval(obj, (void *)r, SWIGTYPE_p_indri__api__ParsedDocument, 1);
            *_cPtr = *obj;
            INIT_ZVAL(*obj);
            object_init_ex(obj,ptr_ce_swig_ParsedDocument);
            // ignore other elements.
            add_property_string(obj,"text",(char *)(r->text), 1);
            add_property_long(obj,"textLength",r->textLength);
            // positions
            // must wrap TermExtent
            zval *positions, *pos, *_ptr;
            MAKE_STD_ZVAL(positions);
            array_init(positions);    
            for (indri::utility::greedy_vector<indri::parse::TermExtent>::iterator iter = r->positions.begin();
            iter != r->positions.end(); iter++) {
                MAKE_STD_ZVAL(pos);
                MAKE_STD_ZVAL(_ptr);
                indri::parse::TermExtent *t = new indri::parse::TermExtent;
                t->begin = iter->begin;
                t->end = iter->end;
                SWIG_SetPointerZval(pos, (void *)t, SWIGTYPE_p_indri__parse__TermExtent, 1);
                *_ptr = *pos;
                INIT_ZVAL(*pos);
                object_init_ex(pos,ptr_ce_swig_TermExtent);
                add_property_zval(pos,"_cPtr",_ptr);
                add_property_long(pos,"begin", iter->begin);
                add_property_long(pos,"end",iter->end);
                add_next_index_zval(positions, pos);
            }
            add_property_zval(obj,"positions",positions);	
            // metadata
            // must wrap MetadataPair 
            zval *pairs;
            MAKE_STD_ZVAL(pairs);
            array_init(pairs);    
            // copy metadata information
            for (indri::utility::greedy_vector<indri::parse::MetadataPair>::iterator iter = r->metadata.begin();
            iter != r->metadata.end(); iter++) {
                add_assoc_string(pairs, (char *)iter->key, (char *)iter->value, 1);
            }
            
            add_property_zval(obj,"metadata",pairs);
            
            add_property_zval(obj,"_cPtr",_cPtr);
            add_next_index_zval(return_value, obj);
        }
    }
    {
        // freearg typemap
        delete arg2;
    }
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_documents) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    std::vector<indri::api::ScoredExtentResult > *arg2 = 0 ;
    SwigValueWrapper< std::vector<indri::api::ParsedDocument * > > result;
    zval **args[3];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 2) || (zend_get_parameters_array_ex(2-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_documents. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    {
        int iStatus;
        ulong iIndex;
        char *sIndex=NULL;
        zval **Data;
        arg2=new std::vector< indri::api::ScoredExtentResult >;
        convert_to_array(*args[1-argbase]);
        zend_hash_internal_pointer_reset((*args[1-argbase])->value.ht);
        while((iStatus=zend_hash_get_current_key((*args[1-argbase])->value.ht,&sIndex,&iIndex,1))!=HASH_KEY_NON_EXISTANT) {
            zend_hash_get_current_data((*args[1-argbase])->value.ht,(void **) &Data);
            indri::api::ScoredExtentResult * arg1 = 0;
            SWIG_ConvertPtr(*(Data), (void **) &arg1, SWIGTYPE_p_indri__api__ScoredExtentResult);
            arg2->push_back(*arg1);
            zend_hash_move_forward((*args[1-argbase])->value.ht);  
            if (sIndex) {
                efree(sIndex);
                sIndex=NULL;
            }
        }
        zend_hash_internal_pointer_reset((*args[1-argbase])->value.ht);
    }
    {
        try {
            result = (arg1)->documents((std::vector<indri::api::ScoredExtentResult > const &)*arg2);
            
        } catch( lemur::api::Exception& e ) {
            //    SWIG_exception( SWIG_RuntimeError, e.what().c_str() );
            // get a warning message rather than abort the script.
            zend_error(E_WARNING, e.what().c_str());
            RETURN_NULL() ;
        }
    }
    {
        std::vector< indri::api::ParsedDocument * >::size_type iIndex;
        array_init(return_value);
        std::vector< indri::api::ParsedDocument * > *resultobj = &result; 
        for (iIndex=0;iIndex<resultobj->size();iIndex++)  {
            zval *obj, *_cPtr;
            MAKE_STD_ZVAL(obj);
            MAKE_STD_ZVAL(_cPtr);
            indri::api::ParsedDocument *r = (*resultobj)[iIndex];
            SWIG_SetPointerZval(obj, (void *)r, SWIGTYPE_p_indri__api__ParsedDocument, 1);
            *_cPtr = *obj;
            INIT_ZVAL(*obj);
            object_init_ex(obj,ptr_ce_swig_ParsedDocument);
            // ignore other elements.
            add_property_string(obj,"text",(char *)(r->text), 1);
            add_property_long(obj,"textLength",r->textLength);
            // positions
            // must wrap TermExtent
            zval *positions, *pos, *_ptr;
            MAKE_STD_ZVAL(positions);
            array_init(positions);    
            for (indri::utility::greedy_vector<indri::parse::TermExtent>::iterator iter = r->positions.begin();
            iter != r->positions.end(); iter++) {
                MAKE_STD_ZVAL(pos);
                MAKE_STD_ZVAL(_ptr);
                indri::parse::TermExtent *t = new indri::parse::TermExtent;
                t->begin = iter->begin;
                t->end = iter->end;
                SWIG_SetPointerZval(pos, (void *)t, SWIGTYPE_p_indri__parse__TermExtent, 1);
                *_ptr = *pos;
                INIT_ZVAL(*pos);
                object_init_ex(pos,ptr_ce_swig_TermExtent);
                add_property_zval(pos,"_cPtr",_ptr);
                add_property_long(pos,"begin", iter->begin);
                add_property_long(pos,"end",iter->end);
                add_next_index_zval(positions, pos);
            }
            add_property_zval(obj,"positions",positions);	
            // metadata
            // must wrap MetadataPair 
            zval *pairs;
            MAKE_STD_ZVAL(pairs);
            array_init(pairs);    
            // copy metadata information
            for (indri::utility::greedy_vector<indri::parse::MetadataPair>::iterator iter = r->metadata.begin();
            iter != r->metadata.end(); iter++) {
                add_assoc_string(pairs, (char *)iter->key, (char *)iter->value, 1);
            }
            
            add_property_zval(obj,"metadata",pairs);
            
            add_property_zval(obj,"_cPtr",_cPtr);
            add_next_index_zval(return_value, obj);
        }
    }
    {
        // freearg typemap
        delete arg2;
    }
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_documentMetadatadocids) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    std::vector<lemur::api::DOCID_T > *arg2 = 0 ;
    std::string *arg3 = 0 ;
    SwigValueWrapper< std::vector<std::string > > result;
    std::string temp3 ;
    zval **args[4];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 3) || (zend_get_parameters_array_ex(3-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_documentMetadatadocids. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    {
        int iStatus;
        ulong iIndex;
        char *sIndex=NULL;
        zval **Data;
        arg2=new std::vector<lemur::api::DOCID_T>;
        convert_to_array(*args[1-argbase]);
        zend_hash_internal_pointer_reset((*args[1-argbase])->value.ht);
        while((iStatus=zend_hash_get_current_key((*args[1-argbase])->value.ht,&sIndex,&iIndex,1))!=HASH_KEY_NON_EXISTANT) {
            zend_hash_get_current_data((*args[1-argbase])->value.ht,(void **) &Data);
            convert_to_long(*Data);
            arg2->push_back((*Data)->value.lval);
            zend_hash_move_forward((*args[1-argbase])->value.ht);  
            if (sIndex) {
                efree(sIndex);
                sIndex=NULL;
            }
        }
        zend_hash_internal_pointer_reset((*args[1-argbase])->value.ht);
    }
    {
        convert_to_string_ex(args[2-argbase]);
        temp3 = std::string(Z_STRVAL_PP(args[2-argbase]));
        arg3 = &temp3;
    }
    {
        try {
            result = (arg1)->documentMetadatadocids((std::vector<lemur::api::DOCID_T > const &)*arg2,(std::string const &)*arg3);
            
        } catch( lemur::api::Exception& e ) {
            //    SWIG_exception( SWIG_RuntimeError, e.what().c_str() );
            // get a warning message rather than abort the script.
            zend_error(E_WARNING, e.what().c_str());
            RETURN_NULL() ;
        }
    }
    {
        std::vector< std::string >::size_type iIndex;
        array_init(return_value);
        std::vector< std::string > *resultobj = &result; 
        for (iIndex=0;iIndex<resultobj->size();iIndex++) 
        add_next_index_string(return_value,(char *) (*resultobj)[iIndex].c_str(),1);
    }
    {
        // freearg typemap
        delete arg2;
    }
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_documentMetadata) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    std::vector<indri::api::ScoredExtentResult > *arg2 = 0 ;
    std::string *arg3 = 0 ;
    SwigValueWrapper< std::vector<std::string > > result;
    std::string temp3 ;
    zval **args[4];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 3) || (zend_get_parameters_array_ex(3-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_documentMetadata. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    {
        int iStatus;
        ulong iIndex;
        char *sIndex=NULL;
        zval **Data;
        arg2=new std::vector< indri::api::ScoredExtentResult >;
        convert_to_array(*args[1-argbase]);
        zend_hash_internal_pointer_reset((*args[1-argbase])->value.ht);
        while((iStatus=zend_hash_get_current_key((*args[1-argbase])->value.ht,&sIndex,&iIndex,1))!=HASH_KEY_NON_EXISTANT) {
            zend_hash_get_current_data((*args[1-argbase])->value.ht,(void **) &Data);
            indri::api::ScoredExtentResult * arg1 = 0;
            SWIG_ConvertPtr(*(Data), (void **) &arg1, SWIGTYPE_p_indri__api__ScoredExtentResult);
            arg2->push_back(*arg1);
            zend_hash_move_forward((*args[1-argbase])->value.ht);  
            if (sIndex) {
                efree(sIndex);
                sIndex=NULL;
            }
        }
        zend_hash_internal_pointer_reset((*args[1-argbase])->value.ht);
    }
    {
        convert_to_string_ex(args[2-argbase]);
        temp3 = std::string(Z_STRVAL_PP(args[2-argbase]));
        arg3 = &temp3;
    }
    {
        try {
            result = (arg1)->documentMetadata((std::vector<indri::api::ScoredExtentResult > const &)*arg2,(std::string const &)*arg3);
            
        } catch( lemur::api::Exception& e ) {
            //    SWIG_exception( SWIG_RuntimeError, e.what().c_str() );
            // get a warning message rather than abort the script.
            zend_error(E_WARNING, e.what().c_str());
            RETURN_NULL() ;
        }
    }
    {
        std::vector< std::string >::size_type iIndex;
        array_init(return_value);
        std::vector< std::string > *resultobj = &result; 
        for (iIndex=0;iIndex<resultobj->size();iIndex++) 
        add_next_index_string(return_value,(char *) (*resultobj)[iIndex].c_str(),1);
    }
    {
        // freearg typemap
        delete arg2;
    }
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_termCount) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    INT64 result;
    zval **args[2];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 1) || (zend_get_parameters_array_ex(1-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_termCount. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    result = (INT64)(arg1)->termCount();
    
    
    
    ZVAL_LONG(return_value,result);
    
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_onetermCount) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    std::string *arg2 = 0 ;
    INT64 result;
    std::string temp2 ;
    zval **args[3];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 2) || (zend_get_parameters_array_ex(2-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_onetermCount. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    {
        convert_to_string_ex(args[1-argbase]);
        temp2 = std::string(Z_STRVAL_PP(args[1-argbase]));
        arg2 = &temp2;
    }
    result = (INT64)(arg1)->onetermCount((std::string const &)*arg2);
    
    
    
    ZVAL_LONG(return_value,result);
    
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_stemCount) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    std::string *arg2 = 0 ;
    INT64 result;
    std::string temp2 ;
    zval **args[3];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 2) || (zend_get_parameters_array_ex(2-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_stemCount. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    {
        convert_to_string_ex(args[1-argbase]);
        temp2 = std::string(Z_STRVAL_PP(args[1-argbase]));
        arg2 = &temp2;
    }
    result = (INT64)(arg1)->stemCount((std::string const &)*arg2);
    
    
    
    ZVAL_LONG(return_value,result);
    
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_termFieldCount) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    INT64 result;
    std::string temp2 ;
    std::string temp3 ;
    zval **args[4];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 3) || (zend_get_parameters_array_ex(3-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_termFieldCount. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    {
        convert_to_string_ex(args[1-argbase]);
        temp2 = std::string(Z_STRVAL_PP(args[1-argbase]));
        arg2 = &temp2;
    }
    {
        convert_to_string_ex(args[2-argbase]);
        temp3 = std::string(Z_STRVAL_PP(args[2-argbase]));
        arg3 = &temp3;
    }
    result = (INT64)(arg1)->termFieldCount((std::string const &)*arg2,(std::string const &)*arg3);
    
    
    
    ZVAL_LONG(return_value,result);
    
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_stemFieldCount) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    INT64 result;
    std::string temp2 ;
    std::string temp3 ;
    zval **args[4];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 3) || (zend_get_parameters_array_ex(3-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_stemFieldCount. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    {
        convert_to_string_ex(args[1-argbase]);
        temp2 = std::string(Z_STRVAL_PP(args[1-argbase]));
        arg2 = &temp2;
    }
    {
        convert_to_string_ex(args[2-argbase]);
        temp3 = std::string(Z_STRVAL_PP(args[2-argbase]));
        arg3 = &temp3;
    }
    result = (INT64)(arg1)->stemFieldCount((std::string const &)*arg2,(std::string const &)*arg3);
    
    
    
    ZVAL_LONG(return_value,result);
    
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_fieldList) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    SwigValueWrapper< std::vector<std::string > > result;
    zval **args[2];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 1) || (zend_get_parameters_array_ex(1-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_fieldList. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    result = (arg1)->fieldList();
    
    {
        std::vector< std::string >::size_type iIndex;
        array_init(return_value);
        std::vector< std::string > *resultobj = &result; 
        for (iIndex=0;iIndex<resultobj->size();iIndex++) 
        add_next_index_string(return_value,(char *) (*resultobj)[iIndex].c_str(),1);
    }
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_documentCount) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    INT64 result;
    zval **args[2];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 1) || (zend_get_parameters_array_ex(1-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_documentCount. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    result = (INT64)(arg1)->documentCount();
    
    
    
    ZVAL_LONG(return_value,result);
    
}


ZEND_NAMED_FUNCTION(_wrap_QueryEnvironment_onedocumentCount) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    std::string *arg2 = 0 ;
    INT64 result;
    std::string temp2 ;
    zval **args[3];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 2) || (zend_get_parameters_array_ex(2-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of QueryEnvironment_onedocumentCount. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    {
        convert_to_string_ex(args[1-argbase]);
        temp2 = std::string(Z_STRVAL_PP(args[1-argbase]));
        arg2 = &temp2;
    }
    result = (INT64)(arg1)->onedocumentCount((std::string const &)*arg2);
    
    
    
    ZVAL_LONG(return_value,result);
    
}


ZEND_NAMED_FUNCTION(_wrap_new_QueryEnvironment) {
    indri::api::QueryEnvironment *result;
    zval **args[1];
    int argbase=0 ;
    
    /* NATIVE Constructor */
    int self_constructor=1;
    if(((ZEND_NUM_ARGS() + argbase )!= 0) || (zend_get_parameters_array_ex(0-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    result = (indri::api::QueryEnvironment *)new indri::api::QueryEnvironment();
    
    
    SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_indri__api__QueryEnvironment, 1);
    
    /* Wrap this return value */
    if (this_ptr) {
        /* NATIVE Constructor, use this_ptr */
        zval *_cPtr; MAKE_STD_ZVAL(_cPtr);
        *_cPtr = *return_value;
        INIT_ZVAL(*return_value);
        add_property_zval(this_ptr,"_cPtr",_cPtr);
    } else if (! this_ptr) {
        /* ALTERNATIVE Constructor, make an object wrapper */
        zval *obj, *_cPtr;
        MAKE_STD_ZVAL(obj);
        MAKE_STD_ZVAL(_cPtr);
        *_cPtr = *return_value;
        INIT_ZVAL(*return_value);
        object_init_ex(obj,ptr_ce_swig_QueryEnvironment);
        add_property_zval(obj,"_cPtr",_cPtr);
        *return_value=*obj;
    }
}


/* This function is designed to be called by the zend list destructors to typecast and do the actual destruction */
void __wrap_delete_QueryEnvironment(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
    swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
    void *ptr=value->ptr ;
    int newobject=value->newobject ;
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    
    efree(value);
    if (! newobject) return; /* can't delete it! */
    SWIG_ZTS_ConvertResourceData(ptr,rsrc->type,type_name,(void **) &arg1,SWIGTYPE_p_indri__api__QueryEnvironment TSRMLS_CC);
    if (! arg1) zend_error(E_ERROR, "QueryEnvironment resource already free'd");
    delete arg1;
    
}


ZEND_NAMED_FUNCTION(_wrap_delete_QueryEnvironment) {
    indri::api::QueryEnvironment *arg1 = (indri::api::QueryEnvironment *) 0 ;
    zval **args[2];
    int argbase=0 ;
    
    if (this_ptr && this_ptr->type==IS_OBJECT) {
        /* fake this_ptr as first arg (till we can work out how to do it better */
        argbase++;
    }
    if(((ZEND_NUM_ARGS() + argbase )!= 1) || (zend_get_parameters_array_ex(1-argbase, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    
    if(SWIG_ConvertPtr(*((0<argbase)?(&this_ptr):(args[0-argbase])), (void **) &arg1, SWIGTYPE_p_indri__api__QueryEnvironment) < 0) {
        zend_error(E_ERROR, "Type error in argument %d of delete_QueryEnvironment. Expected %s", 1-argbase, SWIGTYPE_p_indri__api__QueryEnvironment->name);
    }
    
    /*if ((*args[0])->type==IS_RESOURCE) { */
    /*  Get zend list destructor to free it */
    /*  zend_list_delete(Z_LVAL_PP(args[0])); */
    /* } else {*/ 
    delete arg1;
    
    /*}*/
    
}


/* property handler for class QueryEnvironment */
static pval _wrap_propget_QueryEnvironment(zend_property_reference *property_reference) {
  pval result;
  pval **_result;
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  result.type = IS_NULL;
  if (_propget_QueryEnvironment(property_reference, &result)==SUCCESS) return result;
  /* return it ourselves */
  if (zend_hash_find(Z_OBJPROP_P(property_reference->object),Z_STRVAL_P(&(property->element)),1+Z_STRLEN_P(&(property->element)),(void**)&_result)==SUCCESS) {
  zval *_value;
  MAKE_STD_ZVAL(_value);  *_value=**_result;
  INIT_PZVAL(_value);
  zval_copy_ctor(_value);
  return *_value;
  }
  result.type = IS_NULL;
  return result;
}
static int _propget_QueryEnvironment(zend_property_reference *property_reference, pval *value) {
  /* get the property name */
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  char *propname=Z_STRVAL_P(&(property->element));
  return FAILURE;
}

static int _wrap_propset_QueryEnvironment(zend_property_reference *property_reference, pval *value) { 
  zval * _value;
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  if (_propset_QueryEnvironment(property_reference, value)==SUCCESS) return SUCCESS;
  /* set it ourselves as it is QueryEnvironment */
  MAKE_STD_ZVAL(_value);
  *_value=*value;
  INIT_PZVAL(_value);
  zval_copy_ctor(_value);
  return add_property_zval_ex(property_reference->object,Z_STRVAL_P(&(property->element)),1+Z_STRLEN_P(&(property->element)),_value);
}
static int _propset_QueryEnvironment(zend_property_reference *property_reference, pval *value) {
  /* get the property name */
  zend_llist_element *element = property_reference->elements_list->head;
  zend_overloaded_element *property=(zend_overloaded_element *)element->data;
  char *propname=Z_STRVAL_P(&(property->element));
  return FAILURE;
}

/* NEW Destructor style */
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_INT64) {
/* bah! No destructor for this simple type!! */
}
/* NEW Destructor style */
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_indri__api__ScoredExtentResult) {
/* has destructor: __wrap_delete_ScoredExtentResult */
__wrap_delete_ScoredExtentResult(rsrc, SWIGTYPE_p_indri__api__ScoredExtentResult->name TSRMLS_CC);
}
/* NEW Destructor style */
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_indri__parse__TermExtent) {
/* has destructor: __wrap_delete_TermExtent */
__wrap_delete_TermExtent(rsrc, SWIGTYPE_p_indri__parse__TermExtent->name TSRMLS_CC);
}
/* NEW Destructor style */
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_indri__api__QueryEnvironment) {
/* has destructor: __wrap_delete_QueryEnvironment */
__wrap_delete_QueryEnvironment(rsrc, SWIGTYPE_p_indri__api__QueryEnvironment->name TSRMLS_CC);
}
/* NEW Destructor style */
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_UINT64) {
/* bah! No destructor for this simple type!! */
}
/* NEW Destructor style */
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_indri__api__ParsedDocument) {
/* has destructor: __wrap_delete_ParsedDocument */
__wrap_delete_ParsedDocument(rsrc, SWIGTYPE_p_indri__api__ParsedDocument->name TSRMLS_CC);
}
/* NEW Destructor style */
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_indri__api__QueryAnnotationNode) {
/* has destructor: __wrap_delete_QueryAnnotationNode */
__wrap_delete_QueryAnnotationNode(rsrc, SWIGTYPE_p_indri__api__QueryAnnotationNode->name TSRMLS_CC);
}
/* NEW Destructor style */
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_indri__api__QueryAnnotation) {
/* has destructor: __wrap_delete_QueryAnnotation */
__wrap_delete_QueryAnnotation(rsrc, SWIGTYPE_p_indri__api__QueryAnnotation->name TSRMLS_CC);
}




/* end wrapper section */
/* init section */
#ifdef __cplusplus
extern "C" {
#endif
ZEND_GET_MODULE(indri)
#ifdef __cplusplus
}
#endif

PHP_MSHUTDOWN_FUNCTION(indri)
{
    return SUCCESS;
}
PHP_MINIT_FUNCTION(indri)
{
    int i;
    for (i = 0; swig_types_initial[i]; i++) {
        swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
    }
/* oinit subsection */
/* Define class ScoredExtentResult */
INIT_OVERLOADED_CLASS_ENTRY(ce_swig_ScoredExtentResult,"scoredextentresult",ScoredExtentResult_functions,NULL,_wrap_propget_ScoredExtentResult,_wrap_propset_ScoredExtentResult);
if (! (ptr_ce_swig_ScoredExtentResult=zend_register_internal_class_ex(&ce_swig_ScoredExtentResult,NULL,NULL))) zend_error(E_ERROR,"Error registering wrapper for class ScoredExtentResult");

/* Define class TermExtent */
INIT_OVERLOADED_CLASS_ENTRY(ce_swig_TermExtent,"termextent",TermExtent_functions,NULL,_wrap_propget_TermExtent,_wrap_propset_TermExtent);
if (! (ptr_ce_swig_TermExtent=zend_register_internal_class_ex(&ce_swig_TermExtent,NULL,NULL))) zend_error(E_ERROR,"Error registering wrapper for class TermExtent");

/* Define class ParsedDocument */
INIT_OVERLOADED_CLASS_ENTRY(ce_swig_ParsedDocument,"parseddocument",ParsedDocument_functions,NULL,_wrap_propget_ParsedDocument,_wrap_propset_ParsedDocument);
if (! (ptr_ce_swig_ParsedDocument=zend_register_internal_class_ex(&ce_swig_ParsedDocument,NULL,NULL))) zend_error(E_ERROR,"Error registering wrapper for class ParsedDocument");

/* Define class QueryAnnotationNode */
INIT_OVERLOADED_CLASS_ENTRY(ce_swig_QueryAnnotationNode,"queryannotationnode",QueryAnnotationNode_functions,NULL,_wrap_propget_QueryAnnotationNode,_wrap_propset_QueryAnnotationNode);
if (! (ptr_ce_swig_QueryAnnotationNode=zend_register_internal_class_ex(&ce_swig_QueryAnnotationNode,NULL,NULL))) zend_error(E_ERROR,"Error registering wrapper for class QueryAnnotationNode");

/* Define class QueryAnnotation */
INIT_OVERLOADED_CLASS_ENTRY(ce_swig_QueryAnnotation,"queryannotation",QueryAnnotation_functions,NULL,_wrap_propget_QueryAnnotation,_wrap_propset_QueryAnnotation);
if (! (ptr_ce_swig_QueryAnnotation=zend_register_internal_class_ex(&ce_swig_QueryAnnotation,NULL,NULL))) zend_error(E_ERROR,"Error registering wrapper for class QueryAnnotation");

/* Define class QueryEnvironment */
INIT_OVERLOADED_CLASS_ENTRY(ce_swig_QueryEnvironment,"queryenvironment",QueryEnvironment_functions,NULL,_wrap_propget_QueryEnvironment,_wrap_propset_QueryEnvironment);
if (! (ptr_ce_swig_QueryEnvironment=zend_register_internal_class_ex(&ce_swig_QueryEnvironment,NULL,NULL))) zend_error(E_ERROR,"Error registering wrapper for class QueryEnvironment");


/* Register resource destructors for pointer types */
le_swig__p_INT64=zend_register_list_destructors_ex(_wrap_destroy_p_INT64,NULL,(char *)(SWIGTYPE_p_INT64->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_INT64,&le_swig__p_INT64);
le_swig__p_indri__api__ScoredExtentResult=zend_register_list_destructors_ex(_wrap_destroy_p_indri__api__ScoredExtentResult,NULL,(char *)(SWIGTYPE_p_indri__api__ScoredExtentResult->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_indri__api__ScoredExtentResult,&le_swig__p_indri__api__ScoredExtentResult);
le_swig__p_indri__parse__TermExtent=zend_register_list_destructors_ex(_wrap_destroy_p_indri__parse__TermExtent,NULL,(char *)(SWIGTYPE_p_indri__parse__TermExtent->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_indri__parse__TermExtent,&le_swig__p_indri__parse__TermExtent);
le_swig__p_indri__api__QueryEnvironment=zend_register_list_destructors_ex(_wrap_destroy_p_indri__api__QueryEnvironment,NULL,(char *)(SWIGTYPE_p_indri__api__QueryEnvironment->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_indri__api__QueryEnvironment,&le_swig__p_indri__api__QueryEnvironment);
le_swig__p_UINT64=zend_register_list_destructors_ex(_wrap_destroy_p_UINT64,NULL,(char *)(SWIGTYPE_p_UINT64->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_UINT64,&le_swig__p_UINT64);
le_swig__p_indri__api__ParsedDocument=zend_register_list_destructors_ex(_wrap_destroy_p_indri__api__ParsedDocument,NULL,(char *)(SWIGTYPE_p_indri__api__ParsedDocument->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_indri__api__ParsedDocument,&le_swig__p_indri__api__ParsedDocument);
le_swig__p_indri__api__QueryAnnotationNode=zend_register_list_destructors_ex(_wrap_destroy_p_indri__api__QueryAnnotationNode,NULL,(char *)(SWIGTYPE_p_indri__api__QueryAnnotationNode->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_indri__api__QueryAnnotationNode,&le_swig__p_indri__api__QueryAnnotationNode);
le_swig__p_indri__api__QueryAnnotation=zend_register_list_destructors_ex(_wrap_destroy_p_indri__api__QueryAnnotation,NULL,(char *)(SWIGTYPE_p_indri__api__QueryAnnotation->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_indri__api__QueryAnnotation,&le_swig__p_indri__api__QueryAnnotation);
CG(active_class_entry) = NULL;
/* end oinit subsection */

    return SUCCESS;
}
PHP_RINIT_FUNCTION(indri)
{
/* cinit subsection */
/* end cinit subsection */

/* vinit subsection */
/* end vinit subsection */

    return SUCCESS;
}
PHP_RSHUTDOWN_FUNCTION(indri)
{
    return SUCCESS;
}
PHP_MINFO_FUNCTION(indri)
{
}
/* end init section */
